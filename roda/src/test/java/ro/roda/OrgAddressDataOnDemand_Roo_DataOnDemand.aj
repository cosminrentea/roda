// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.AddressDataOnDemand;
import ro.roda.OrgAddress;
import ro.roda.OrgAddressDataOnDemand;
import ro.roda.OrgAddressPK;
import ro.roda.OrgDataOnDemand;

privileged aspect OrgAddressDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OrgAddressDataOnDemand: @Component;
    
    private Random OrgAddressDataOnDemand.rnd = new SecureRandom();
    
    private List<OrgAddress> OrgAddressDataOnDemand.data;
    
    @Autowired
    private AddressDataOnDemand OrgAddressDataOnDemand.addressDataOnDemand;
    
    @Autowired
    private OrgDataOnDemand OrgAddressDataOnDemand.orgDataOnDemand;
    
    public OrgAddress OrgAddressDataOnDemand.getNewTransientOrgAddress(int index) {
        OrgAddress obj = new OrgAddress();
        setEmbeddedIdClass(obj, index);
        setDateend(obj, index);
        setDatestart(obj, index);
        return obj;
    }
    
    public void OrgAddressDataOnDemand.setEmbeddedIdClass(OrgAddress obj, int index) {
        Integer orgId = new Integer(index);
        Integer addressId = new Integer(index);
        
        OrgAddressPK embeddedIdClass = new OrgAddressPK(orgId, addressId);
        obj.setId(embeddedIdClass);
    }
    
    public void OrgAddressDataOnDemand.setDateend(OrgAddress obj, int index) {
        Date dateend = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateend(dateend);
    }
    
    public void OrgAddressDataOnDemand.setDatestart(OrgAddress obj, int index) {
        Date datestart = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDatestart(datestart);
    }
    
    public OrgAddress OrgAddressDataOnDemand.getSpecificOrgAddress(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OrgAddress obj = data.get(index);
        OrgAddressPK id = obj.getId();
        return OrgAddress.findOrgAddress(id);
    }
    
    public OrgAddress OrgAddressDataOnDemand.getRandomOrgAddress() {
        init();
        OrgAddress obj = data.get(rnd.nextInt(data.size()));
        OrgAddressPK id = obj.getId();
        return OrgAddress.findOrgAddress(id);
    }
    
    public boolean OrgAddressDataOnDemand.modifyOrgAddress(OrgAddress obj) {
        return false;
    }
    
    public void OrgAddressDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = OrgAddress.findOrgAddressEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OrgAddress' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OrgAddress>();
        for (int i = 0; i < 10; i++) {
            OrgAddress obj = getNewTransientOrgAddress(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
