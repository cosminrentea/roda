<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd         http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd  http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd">
	<!-- This will automatically locate any and all property files you have 
		within your classpath, provided they fall under the META-INF/spring directory. 
		The located property files are parsed and their values can then be used within 
		application context files in the form of ${propertyKey}. -->
	<context:property-placeholder location="classpath*:META-INF/spring/*.properties" />
	
	<!-- Turn on AspectJ @Configurable support. As a result, any time you instantiate 
		an object, Spring will attempt to perform dependency injection on that object. 
		This occurs for instantiation via the "new" keyword, as well as via reflection. 
		This is possible because AspectJ is used to "weave" Roo-based applications 
		at compile time. In effect this feature allows dependency injection of any 
		object at all in your system, which is a very useful feature (without @Configurable 
		you'd only be able to dependency inject objects acquired from Spring or subsequently 
		presented to a specific Spring dependency injection method). Roo applications 
		use this useful feature in a number of areas, such as @PersistenceContext 
		injection into entities. -->
	<context:spring-configured />
	
	<!-- This declaration will cause Spring to locate every @Component, @Repository 
		and @Service in your application. In practical terms this allows you to write 
		a POJO and then simply annotate the new POJO as an @Service and Spring will 
		automatically detect, instantiate and dependency inject your service at startup 
		time. Importantly, you can then also have your new service injected into 
		any other class that requires it simply by declaring a field for your service 
		inside the relying class and Spring will inject it. Note that two exclude 
		filters are declared. The first ensures that Spring doesn't spend time introspecting 
		Roo-specific ITD aspects. The second ensures Roo doesn't instantiate your 
		@Controller classes, as these should be instantiated by a web tier application 
		context. Refer to web.xml for more details about the web tier application 
		context setup services. Furthermore, this turns on @Autowired, @PostConstruct 
		etc support. These annotations allow you to use common Spring and Java Enterprise 
		Edition annotations in your classes without needing to do any special configuration. 
		The most commonly used annotation is @Autowired, which instructs Spring to 
		dependency inject an object into your class. -->   
	<context:component-scan base-package="ro.roda">
		<context:exclude-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />
	</context:component-scan>
	
	<cache:annotation-driven />
    
    <!-- Cosmin: Generic Logger using AspectJ -->
    <!-- 
    <aop:aspectj-autoproxy />
    <bean class="ro.roda.util.AspectLogger" />
    -->
    
	<!-- Cosmin: add custom properties to the existing system properties -->
	<bean id="systemProps"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" value="#{@systemProperties}" />
		<property name="targetMethod" value="putAll" />
		<property name="arguments">
			<util:properties>
				<prop key="java.library.path">${roda.R.java.library.path}</prop>
				<prop key="jri.ignore.ule">${roda.R.jri.ignore.ule}</prop>
			</util:properties>
		</property>
	</bean>

	<bean class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close" id="dataSource">
		<property name="driverClassName" value="${database.driverClassName}" />
		<property name="url" value="${database.url}" />
		<property name="username" value="${database.username}" />
		<property name="password" value="${database.password}" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="1800000" />
		<property name="numTestsPerEvictionRun" value="3" />
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<property name="validationQuery" value="SELECT version();" />
	</bean>

	<!-- [Cosmin] Already Declared a DataSource. Next bean is a possible alternative, 
		using c3p0 instead of DBCP -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" 
		destroy-method="close" p:driverClass="${database.driverClassName}" p:jdbcUrl="${database.url}" 
		p:user="${database.username}" p:password="${database.password}" p:acquireIncrement="5" 
		p:idleConnectionTestPeriod="60" p:maxPoolSize="100" p:maxStatements="50" 
		p:minPoolSize="10" /> -->

	<bean class="org.springframework.orm.jpa.JpaTransactionManager"
		id="transactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<tx:annotation-driven mode="aspectj"
		transaction-manager="transactionManager" />

	<bean
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
		id="entityManagerFactory">
		<property name="persistenceUnitName" value="persistenceUnit" />
		<property name="dataSource" ref="dataSource" />
		<!-- 
		<property name="jpaProperties">
            <map>
                <entry key="hibernate.cache.use_second_level_cache" value="true"/>
                <entry key="hibernate.cache.use_query_cache" value="true"/>               
            </map>
        </property>
        -->
	</bean>

	<task:annotation-driven executor="asyncExecutor"
		mode="aspectj" />

	<task:executor id="asyncExecutor" pool-size="${roda.executor.poolSize}" />
	
	<bean class="ro.roda.util.ScheduledTask" id="rodaScheduledTask" />

<!-- 
	<task:scheduled-tasks scheduler="rodaScheduler">
		
    	<task:scheduled ref="rodaScheduledTask" method="maintenance" cron="${roda.scheduler.cron.maintenance}"/>

    	<task:scheduled ref="rodaScheduledTask" method="backup" cron="${roda.scheduler.cron.backup}"/>

    	<task:scheduled ref="rodaScheduledTask" method="vacuum" cron="${roda.scheduler.cron.vacuum}"/>
    	
	</task:scheduled-tasks>
 -->
	<task:scheduler id="rodaScheduler" pool-size="${roda.scheduler.poolSize}"/>

	<!-- Caching: EhCache library setup -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcache" />
	</bean>

	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml" />
		<property name="shared" value="true"/>
	</bean>
	
	<!-- Cosmin: Basic Object-to-XML Serialization -->
	<bean id="xstreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
	</bean>

	<!-- Cosmin: R integration (JRI / RJava); 
		uses the updated system properties - configured also in this file 
	! -->
	<bean id="rb" class="ro.roda.util.RBean" destroy-method="end"
		depends-on="systemProps">
		<constructor-arg index="0">
			<list>
				<value>--vanilla</value>
			</list>
		</constructor-arg>
		<constructor-arg index="1" value="false" />
		<constructor-arg index="2">
			<null />
		</constructor-arg>
	</bean>

	<!-- SolrJ  -->
	<bean class="org.apache.solr.client.solrj.impl.HttpSolrServer"
		id="solrServer">
		<constructor-arg value="${solr.serverUrl}" />
	</bean>
	
	<!-- JackRabbit -->
    <bean id="jackrabbitRepositoryConfig" class="org.apache.jackrabbit.core.config.RepositoryConfig" factory-method="create">
        <constructor-arg index="0" value="${roda.jackrabbit.repository.xml}"/>
        <constructor-arg index="1" value="${roda.jackrabbit.repository}" />
    </bean>
	<bean id="jackrabbitRepository" class="org.apache.jackrabbit.core.RepositoryImpl">
        <constructor-arg index="0" ref="jackrabbitRepositoryConfig" />
    </bean>
    
	<!-- Cosmin: support for file-uploading -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- one of the properties available; the maximum file size in bytes -->
		<property name="maxUploadSize" value="${roda.filestore.maxuploadsize}" />
	</bean>
<!-- 
	<bean id="multipartFilter"
		class="org.springframework.web.multipart.support.MultipartFilter">
		<property name="multipartResolverBeanName" value="multipartResolver" />
	</bean>
-->

</beans>
