// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Instance;
import ro.roda.InstanceDataOnDemand;
import ro.roda.Rodauser;
import ro.roda.RodauserDataOnDemand;
import ro.roda.Study;
import ro.roda.StudyDataOnDemand;
import ro.roda.TimeMethType;
import ro.roda.TimeMethTypeDataOnDemand;
import ro.roda.UnitAnalysis;
import ro.roda.UnitAnalysisDataOnDemand;
import ro.roda.service.InstanceService;

privileged aspect InstanceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InstanceDataOnDemand: @Component;
    
    private Random InstanceDataOnDemand.rnd = new SecureRandom();
    
    private List<Instance> InstanceDataOnDemand.data;
    
    @Autowired
    RodauserDataOnDemand InstanceDataOnDemand.rodauserDataOnDemand;
    
    @Autowired
    StudyDataOnDemand InstanceDataOnDemand.studyDataOnDemand;
    
    @Autowired
    TimeMethTypeDataOnDemand InstanceDataOnDemand.timeMethTypeDataOnDemand;
    
    @Autowired
    UnitAnalysisDataOnDemand InstanceDataOnDemand.unitAnalysisDataOnDemand;
    
    @Autowired
    InstanceService InstanceDataOnDemand.instanceService;
    
    public Instance InstanceDataOnDemand.getNewTransientInstance(int index) {
        Instance obj = new Instance();
        setAdded(obj, index);
        setAddedBy(obj, index);
        setDateend(obj, index);
        setDatestart(obj, index);
        setInsertionStatus(obj, index);
        setRawData(obj, index);
        setRawMetadata(obj, index);
        setStudyId(obj, index);
        setTimeMethId(obj, index);
        setUnitAnalysisId(obj, index);
        return obj;
    }
    
    public void InstanceDataOnDemand.setAdded(Instance obj, int index) {
        Calendar added = Calendar.getInstance();
        obj.setAdded(added);
    }
    
    public void InstanceDataOnDemand.setAddedBy(Instance obj, int index) {
        Rodauser addedBy = rodauserDataOnDemand.getRandomRodauser();
        obj.setAddedBy(addedBy);
    }
    
    public void InstanceDataOnDemand.setDateend(Instance obj, int index) {
        Calendar dateend = Calendar.getInstance();
        obj.setDateend(dateend);
    }
    
    public void InstanceDataOnDemand.setDatestart(Instance obj, int index) {
        Calendar datestart = Calendar.getInstance();
        obj.setDatestart(datestart);
    }
    
    public void InstanceDataOnDemand.setInsertionStatus(Instance obj, int index) {
        Integer insertionStatus = new Integer(index);
        obj.setInsertionStatus(insertionStatus);
    }
    
    public void InstanceDataOnDemand.setRawData(Instance obj, int index) {
        Boolean rawData = true;
        obj.setRawData(rawData);
    }
    
    public void InstanceDataOnDemand.setRawMetadata(Instance obj, int index) {
        Boolean rawMetadata = true;
        obj.setRawMetadata(rawMetadata);
    }
    
    public void InstanceDataOnDemand.setStudyId(Instance obj, int index) {
        Study studyId = studyDataOnDemand.getRandomStudy();
        obj.setStudyId(studyId);
    }
    
    public void InstanceDataOnDemand.setTimeMethId(Instance obj, int index) {
        TimeMethType timeMethId = timeMethTypeDataOnDemand.getRandomTimeMethType();
        obj.setTimeMethId(timeMethId);
    }
    
    public void InstanceDataOnDemand.setUnitAnalysisId(Instance obj, int index) {
        UnitAnalysis unitAnalysisId = unitAnalysisDataOnDemand.getRandomUnitAnalysis();
        obj.setUnitAnalysisId(unitAnalysisId);
    }
    
    public Instance InstanceDataOnDemand.getSpecificInstance(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Instance obj = data.get(index);
        Integer id = obj.getId();
        return instanceService.findInstance(id);
    }
    
    public Instance InstanceDataOnDemand.getRandomInstance() {
        init();
        Instance obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return instanceService.findInstance(id);
    }
    
    public boolean InstanceDataOnDemand.modifyInstance(Instance obj) {
        return false;
    }
    
    public void InstanceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = instanceService.findInstanceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Instance' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Instance>();
        for (int i = 0; i < 10; i++) {
            Instance obj = getNewTransientInstance(i);
            try {
                instanceService.saveInstance(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
