// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import ro.roda.domain.SeriesDescr;

privileged aspect SeriesDescr_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer SeriesDescr.solrServer;
    
    public static QueryResponse SeriesDescr.search(String queryString) {
        String searchString = "SeriesDescr_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse SeriesDescr.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void SeriesDescr.indexSeriesDescr(SeriesDescr seriesDescr) {
        List<SeriesDescr> seriesdescrs = new ArrayList<SeriesDescr>();
        seriesdescrs.add(seriesDescr);
        indexSeriesDescrs(seriesdescrs);
    }
    
    @Async
    public static void SeriesDescr.indexSeriesDescrs(Collection<SeriesDescr> seriesdescrs) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (SeriesDescr seriesDescr : seriesdescrs) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "seriesdescr_" + seriesDescr.getId());
            sid.addField("seriesDescr.langid_t", seriesDescr.getLangId());
            sid.addField("seriesDescr.catalogid_t", seriesDescr.getCatalogId());
            sid.addField("seriesDescr.notes_s", seriesDescr.getNotes());
            sid.addField("seriesDescr.title_s", seriesDescr.getTitle());
            sid.addField("seriesDescr.subtitle_s", seriesDescr.getSubtitle());
            sid.addField("seriesDescr.alternativetitle_s", seriesDescr.getAlternativeTitle());
            sid.addField("seriesDescr.abstract1_s", seriesDescr.getAbstract1());
            sid.addField("seriesDescr.timecovered_s", seriesDescr.getTimeCovered());
            sid.addField("seriesDescr.geographiccoverage_s", seriesDescr.getGeographicCoverage());
            sid.addField("seriesDescr.id_t", seriesDescr.getId());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("seriesdescr_solrsummary_t", new StringBuilder().append(seriesDescr.getLangId()).append(" ").append(seriesDescr.getCatalogId()).append(" ").append(seriesDescr.getNotes()).append(" ").append(seriesDescr.getTitle()).append(" ").append(seriesDescr.getSubtitle()).append(" ").append(seriesDescr.getAlternativeTitle()).append(" ").append(seriesDescr.getAbstract1()).append(" ").append(seriesDescr.getTimeCovered()).append(" ").append(seriesDescr.getGeographicCoverage()).append(" ").append(seriesDescr.getId()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void SeriesDescr.deleteIndex(SeriesDescr seriesDescr) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("seriesdescr_" + seriesDescr.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void SeriesDescr.postPersistOrUpdate() {
        indexSeriesDescr(this);
    }
    
    @PreRemove
    private void SeriesDescr.preRemove() {
        deleteIndex(this);
    }
    
    public static SolrServer SeriesDescr.solrServer() {
        SolrServer _solrServer = new SeriesDescr().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
