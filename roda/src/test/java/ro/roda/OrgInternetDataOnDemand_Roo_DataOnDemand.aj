// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Internet;
import ro.roda.InternetDataOnDemand;
import ro.roda.Org;
import ro.roda.OrgDataOnDemand;
import ro.roda.OrgInternet;
import ro.roda.OrgInternetDataOnDemand;
import ro.roda.OrgInternetPK;
import ro.roda.service.OrgInternetService;

privileged aspect OrgInternetDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OrgInternetDataOnDemand: @Component;
    
    private Random OrgInternetDataOnDemand.rnd = new SecureRandom();
    
    private List<OrgInternet> OrgInternetDataOnDemand.data;
    
    @Autowired
    InternetDataOnDemand OrgInternetDataOnDemand.internetDataOnDemand;
    
    @Autowired
    OrgDataOnDemand OrgInternetDataOnDemand.orgDataOnDemand;
    
    @Autowired
    OrgInternetService OrgInternetDataOnDemand.orgInternetService;
    
    public OrgInternet OrgInternetDataOnDemand.getNewTransientOrgInternet(int index) {
        OrgInternet obj = new OrgInternet();
        setEmbeddedIdClass(obj, index);
        setInternetId(obj, index);
        setMain(obj, index);
        setOrgId(obj, index);
        return obj;
    }
    
    public void OrgInternetDataOnDemand.setEmbeddedIdClass(OrgInternet obj, int index) {
        Integer orgId = new Integer(index);
        Integer internetId = new Integer(index);
        
        OrgInternetPK embeddedIdClass = new OrgInternetPK(orgId, internetId);
        obj.setId(embeddedIdClass);
    }
    
    public void OrgInternetDataOnDemand.setInternetId(OrgInternet obj, int index) {
        Internet internetId = internetDataOnDemand.getRandomInternet();
        obj.setInternetId(internetId);
    }
    
    public void OrgInternetDataOnDemand.setMain(OrgInternet obj, int index) {
        Boolean main = true;
        obj.setMain(main);
    }
    
    public void OrgInternetDataOnDemand.setOrgId(OrgInternet obj, int index) {
        Org orgId = orgDataOnDemand.getRandomOrg();
        obj.setOrgId(orgId);
    }
    
    public OrgInternet OrgInternetDataOnDemand.getSpecificOrgInternet(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OrgInternet obj = data.get(index);
        OrgInternetPK id = obj.getId();
        return orgInternetService.findOrgInternet(id);
    }
    
    public OrgInternet OrgInternetDataOnDemand.getRandomOrgInternet() {
        init();
        OrgInternet obj = data.get(rnd.nextInt(data.size()));
        OrgInternetPK id = obj.getId();
        return orgInternetService.findOrgInternet(id);
    }
    
    public boolean OrgInternetDataOnDemand.modifyOrgInternet(OrgInternet obj) {
        return false;
    }
    
    public void OrgInternetDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = orgInternetService.findOrgInternetEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OrgInternet' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OrgInternet>();
        for (int i = 0; i < 10; i++) {
            OrgInternet obj = getNewTransientOrgInternet(i);
            try {
                orgInternetService.saveOrgInternet(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
