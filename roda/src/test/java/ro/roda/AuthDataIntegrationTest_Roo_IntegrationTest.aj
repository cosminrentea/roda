// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import ro.roda.AuthDataDataOnDemand;
import ro.roda.AuthDataIntegrationTest;
import ro.roda.service.AuthDataService;

privileged aspect AuthDataIntegrationTest_Roo_IntegrationTest {
    
    declare @type: AuthDataIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: AuthDataIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: AuthDataIntegrationTest: @Transactional;
    
    @Autowired
    AuthDataDataOnDemand AuthDataIntegrationTest.dod;
    
    @Autowired
    AuthDataService AuthDataIntegrationTest.authDataService;
    
    @Test
    public void AuthDataIntegrationTest.testCountAllAuthDatas() {
        Assert.assertNotNull("Data on demand for 'AuthData' failed to initialize correctly", dod.getRandomAuthData());
        long count = authDataService.countAllAuthDatas();
        Assert.assertTrue("Counter for 'AuthData' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void AuthDataIntegrationTest.testFindAuthData() {
        AuthData obj = dod.getRandomAuthData();
        Assert.assertNotNull("Data on demand for 'AuthData' failed to initialize correctly", obj);
        Integer id = obj.getUserId();
        Assert.assertNotNull("Data on demand for 'AuthData' failed to provide an identifier", id);
        obj = authDataService.findAuthData(id);
        Assert.assertNotNull("Find method for 'AuthData' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'AuthData' returned the incorrect identifier", id, obj.getUserId());
    }
    
    @Test
    public void AuthDataIntegrationTest.testFindAllAuthDatas() {
        Assert.assertNotNull("Data on demand for 'AuthData' failed to initialize correctly", dod.getRandomAuthData());
        long count = authDataService.countAllAuthDatas();
        Assert.assertTrue("Too expensive to perform a find all test for 'AuthData', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<AuthData> result = authDataService.findAllAuthDatas();
        Assert.assertNotNull("Find all method for 'AuthData' illegally returned null", result);
        Assert.assertTrue("Find all method for 'AuthData' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void AuthDataIntegrationTest.testFindAuthDataEntries() {
        Assert.assertNotNull("Data on demand for 'AuthData' failed to initialize correctly", dod.getRandomAuthData());
        long count = authDataService.countAllAuthDatas();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<AuthData> result = authDataService.findAuthDataEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'AuthData' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'AuthData' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void AuthDataIntegrationTest.testSaveAuthData() {
        Assert.assertNotNull("Data on demand for 'AuthData' failed to initialize correctly", dod.getRandomAuthData());
        AuthData obj = dod.getNewTransientAuthData(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'AuthData' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'AuthData' identifier to be null", obj.getUserId());
        authDataService.saveAuthData(obj);
        obj.flush();
        Assert.assertNotNull("Expected 'AuthData' identifier to no longer be null", obj.getUserId());
    }
    
    @Test
    public void AuthDataIntegrationTest.testDeleteAuthData() {
        AuthData obj = dod.getRandomAuthData();
        Assert.assertNotNull("Data on demand for 'AuthData' failed to initialize correctly", obj);
        Integer id = obj.getUserId();
        Assert.assertNotNull("Data on demand for 'AuthData' failed to provide an identifier", id);
        obj = authDataService.findAuthData(id);
        authDataService.deleteAuthData(obj);
        obj.flush();
        Assert.assertNull("Failed to remove 'AuthData' with identifier '" + id + "'", authDataService.findAuthData(id));
    }
    
}
