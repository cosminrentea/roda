// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import ro.roda.domain.InstancePersonAssoc;
import ro.roda.web.InstancePersonAssocController;

privileged aspect InstancePersonAssocController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> InstancePersonAssocController.showJson(@PathVariable("id") Integer id) {
        InstancePersonAssoc instancePersonAssoc = instancePersonAssocService.findInstancePersonAssoc(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (instancePersonAssoc == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(instancePersonAssoc.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> InstancePersonAssocController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<InstancePersonAssoc> result = instancePersonAssocService.findAllInstancePersonAssocs();
        return new ResponseEntity<String>(InstancePersonAssoc.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InstancePersonAssocController.createFromJson(@RequestBody String json) {
        InstancePersonAssoc instancePersonAssoc = InstancePersonAssoc.fromJsonToInstancePersonAssoc(json);
        instancePersonAssocService.saveInstancePersonAssoc(instancePersonAssoc);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> InstancePersonAssocController.createFromJsonArray(@RequestBody String json) {
        for (InstancePersonAssoc instancePersonAssoc: InstancePersonAssoc.fromJsonArrayToInstancePersonAssocs(json)) {
            instancePersonAssocService.saveInstancePersonAssoc(instancePersonAssoc);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> InstancePersonAssocController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        InstancePersonAssoc instancePersonAssoc = InstancePersonAssoc.fromJsonToInstancePersonAssoc(json);
        if (instancePersonAssocService.updateInstancePersonAssoc(instancePersonAssoc) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> InstancePersonAssocController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (InstancePersonAssoc instancePersonAssoc: InstancePersonAssoc.fromJsonArrayToInstancePersonAssocs(json)) {
            if (instancePersonAssocService.updateInstancePersonAssoc(instancePersonAssoc) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> InstancePersonAssocController.deleteFromJson(@PathVariable("id") Integer id) {
        InstancePersonAssoc instancePersonAssoc = instancePersonAssocService.findInstancePersonAssoc(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (instancePersonAssoc == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        instancePersonAssocService.deleteInstancePersonAssoc(instancePersonAssoc);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
