// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import ro.roda.StudyPersonAcl;

privileged aspect StudyPersonAcl_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer StudyPersonAcl.solrServer;
    
    public static QueryResponse StudyPersonAcl.search(String queryString) {
        String searchString = "StudyPersonAcl_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse StudyPersonAcl.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void StudyPersonAcl.indexStudyPersonAcl(StudyPersonAcl studyPersonAcl) {
        List<StudyPersonAcl> studypersonacls = new ArrayList<StudyPersonAcl>();
        studypersonacls.add(studyPersonAcl);
        indexStudyPersonAcls(studypersonacls);
    }
    
    @Async
    public static void StudyPersonAcl.indexStudyPersonAcls(Collection<StudyPersonAcl> studypersonacls) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (StudyPersonAcl studyPersonAcl : studypersonacls) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "studypersonacl_" + studyPersonAcl.getId());
            sid.addField("studyPersonAcl.studypersonid_t", studyPersonAcl.getStudyPersonId());
            sid.addField("studyPersonAcl.read_b", studyPersonAcl.getRead());
            sid.addField("studyPersonAcl.update_b", studyPersonAcl.getUpdate());
            sid.addField("studyPersonAcl.delete_b", studyPersonAcl.getDelete());
            sid.addField("studyPersonAcl.modacl_b", studyPersonAcl.getModacl());
            sid.addField("studyPersonAcl.id_t", studyPersonAcl.getId());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("studypersonacl_solrsummary_t", new StringBuilder().append(studyPersonAcl.getStudyPersonId()).append(" ").append(studyPersonAcl.getRead()).append(" ").append(studyPersonAcl.getUpdate()).append(" ").append(studyPersonAcl.getDelete()).append(" ").append(studyPersonAcl.getModacl()).append(" ").append(studyPersonAcl.getId()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void StudyPersonAcl.deleteIndex(StudyPersonAcl studyPersonAcl) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("studypersonacl_" + studyPersonAcl.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void StudyPersonAcl.postPersistOrUpdate() {
        indexStudyPersonAcl(this);
    }
    
    @PreRemove
    private void StudyPersonAcl.preRemove() {
        deleteIndex(this);
    }
    
    public static SolrServer StudyPersonAcl.solrServer() {
        SolrServer _solrServer = new StudyPersonAcl().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
