// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.domain.CmsLayoutGroup;
import ro.roda.service.CmsLayoutGroupService;
import ro.roda.web.CmsLayoutGroupController;

privileged aspect CmsLayoutGroupController_Roo_Controller {
    
    @Autowired
    CmsLayoutGroupService CmsLayoutGroupController.cmsLayoutGroupService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String CmsLayoutGroupController.create(@Valid CmsLayoutGroup cmsLayoutGroup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, cmsLayoutGroup);
            return "cmslayoutgroups/create";
        }
        uiModel.asMap().clear();
        cmsLayoutGroupService.saveCmsLayoutGroup(cmsLayoutGroup);
        return "redirect:/cmslayoutgroups/" + encodeUrlPathSegment(cmsLayoutGroup.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String CmsLayoutGroupController.createForm(Model uiModel) {
        populateEditForm(uiModel, new CmsLayoutGroup());
        return "cmslayoutgroups/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String CmsLayoutGroupController.show(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("cmslayoutgroup", cmsLayoutGroupService.findCmsLayoutGroup(id));
        uiModel.addAttribute("itemId", id);
        return "cmslayoutgroups/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String CmsLayoutGroupController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("cmslayoutgroups", cmsLayoutGroupService.findCmsLayoutGroupEntries(firstResult, sizeNo));
            float nrOfPages = (float) cmsLayoutGroupService.countAllCmsLayoutGroups() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("cmslayoutgroups", cmsLayoutGroupService.findAllCmsLayoutGroups());
        }
        return "cmslayoutgroups/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String CmsLayoutGroupController.update(@Valid CmsLayoutGroup cmsLayoutGroup, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, cmsLayoutGroup);
            return "cmslayoutgroups/update";
        }
        uiModel.asMap().clear();
        cmsLayoutGroupService.updateCmsLayoutGroup(cmsLayoutGroup);
        return "redirect:/cmslayoutgroups/" + encodeUrlPathSegment(cmsLayoutGroup.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String CmsLayoutGroupController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, cmsLayoutGroupService.findCmsLayoutGroup(id));
        return "cmslayoutgroups/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String CmsLayoutGroupController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        CmsLayoutGroup cmsLayoutGroup = cmsLayoutGroupService.findCmsLayoutGroup(id);
        cmsLayoutGroupService.deleteCmsLayoutGroup(cmsLayoutGroup);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/cmslayoutgroups";
    }
    
    void CmsLayoutGroupController.populateEditForm(Model uiModel, CmsLayoutGroup cmsLayoutGroup) {
        uiModel.addAttribute("cmsLayoutGroup", cmsLayoutGroup);
    }
    
    String CmsLayoutGroupController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
