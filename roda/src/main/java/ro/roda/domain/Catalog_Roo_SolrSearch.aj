// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.domain;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.apache.solr.common.SolrInputDocument;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import ro.roda.domain.Catalog;

privileged aspect Catalog_Roo_SolrSearch {
    
    @Autowired
    transient SolrServer Catalog.solrServer;
    
    public static QueryResponse Catalog.search(String queryString) {
        String searchString = "Catalog_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse Catalog.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    public static void Catalog.indexCatalog(Catalog catalog) {
        List<Catalog> catalogs = new ArrayList<Catalog>();
        catalogs.add(catalog);
        indexCatalogs(catalogs);
    }
    
    @Async
    public static void Catalog.indexCatalogs(Collection<Catalog> catalogs) {
        List<SolrInputDocument> documents = new ArrayList<SolrInputDocument>();
        for (Catalog catalog : catalogs) {
            SolrInputDocument sid = new SolrInputDocument();
            sid.addField("id", "catalog_" + catalog.getId());
            sid.addField("catalog.series_t", catalog.getSeries());
            sid.addField("catalog.parentid_t", catalog.getParentId());
            sid.addField("catalog.owner_t", catalog.getOwner());
            sid.addField("catalog.name_s", catalog.getName());
            sid.addField("catalog.added_dt", catalog.getAdded().getTime());
            sid.addField("catalog.sequencenr_i", catalog.getSequencenr());
            sid.addField("catalog.description_s", catalog.getDescription());
            sid.addField("catalog.id_i", catalog.getId());
            // Add summary field to allow searching documents for objects of this type
            sid.addField("catalog_solrsummary_t", new StringBuilder().append(catalog.getSeries()).append(" ").append(catalog.getParentId()).append(" ").append(catalog.getOwner()).append(" ").append(catalog.getName()).append(" ").append(catalog.getAdded().getTime()).append(" ").append(catalog.getSequencenr()).append(" ").append(catalog.getDescription()).append(" ").append(catalog.getId()));
            documents.add(sid);
        }
        try {
            SolrServer solrServer = solrServer();
            solrServer.add(documents);
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Async
    public static void Catalog.deleteIndex(Catalog catalog) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("catalog_" + catalog.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void Catalog.postPersistOrUpdate() {
        indexCatalog(this);
    }
    
    @PreRemove
    private void Catalog.preRemove() {
        deleteIndex(this);
    }
    
    public static SolrServer Catalog.solrServer() {
        SolrServer _solrServer = new Catalog().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
