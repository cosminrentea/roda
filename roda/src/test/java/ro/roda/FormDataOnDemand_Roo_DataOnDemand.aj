// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Form;
import ro.roda.FormDataOnDemand;
import ro.roda.Instance;
import ro.roda.InstanceDataOnDemand;
import ro.roda.PersonDataOnDemand;
import ro.roda.service.FormService;

privileged aspect FormDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FormDataOnDemand: @Component;
    
    private Random FormDataOnDemand.rnd = new SecureRandom();
    
    private List<Form> FormDataOnDemand.data;
    
    @Autowired
    InstanceDataOnDemand FormDataOnDemand.instanceDataOnDemand;
    
    @Autowired
    PersonDataOnDemand FormDataOnDemand.personDataOnDemand;
    
    @Autowired
    FormService FormDataOnDemand.formService;
    
    public Form FormDataOnDemand.getNewTransientForm(int index) {
        Form obj = new Form();
        setFillTime(obj, index);
        setInstanceId(obj, index);
        setOperatorNotes(obj, index);
        setOrderInInstance(obj, index);
        return obj;
    }
    
    public void FormDataOnDemand.setFillTime(Form obj, int index) {
        Calendar fillTime = Calendar.getInstance();
        obj.setFillTime(fillTime);
    }
    
    public void FormDataOnDemand.setInstanceId(Form obj, int index) {
        Instance instanceId = instanceDataOnDemand.getRandomInstance();
        obj.setInstanceId(instanceId);
    }
    
    public void FormDataOnDemand.setOperatorNotes(Form obj, int index) {
        String operatorNotes = "operatorNotes_" + index;
        obj.setOperatorNotes(operatorNotes);
    }
    
    public void FormDataOnDemand.setOrderInInstance(Form obj, int index) {
        Integer orderInInstance = new Integer(index);
        obj.setOrderInInstance(orderInInstance);
    }
    
    public Form FormDataOnDemand.getSpecificForm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Form obj = data.get(index);
        Long id = obj.getId();
        return formService.findForm(id);
    }
    
    public Form FormDataOnDemand.getRandomForm() {
        init();
        Form obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return formService.findForm(id);
    }
    
    public boolean FormDataOnDemand.modifyForm(Form obj) {
        return false;
    }
    
    public void FormDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = formService.findFormEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Form' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Form>();
        for (int i = 0; i < 10; i++) {
            Form obj = getNewTransientForm(i);
            try {
                formService.saveForm(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
