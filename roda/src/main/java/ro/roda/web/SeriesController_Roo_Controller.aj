// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.domain.Series;
import ro.roda.service.CatalogService;
import ro.roda.service.SeriesDescrService;
import ro.roda.service.SeriesService;
import ro.roda.service.TopicService;
import ro.roda.web.SeriesController;

privileged aspect SeriesController_Roo_Controller {
    
    @Autowired
    SeriesService SeriesController.seriesService;
    
    @Autowired
    CatalogService SeriesController.catalogService;
    
    @Autowired
    SeriesDescrService SeriesController.seriesDescrService;
    
    @Autowired
    TopicService SeriesController.topicService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SeriesController.create(@Valid Series series, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, series);
            return "serieses/create";
        }
        uiModel.asMap().clear();
        seriesService.saveSeries(series);
        return "redirect:/serieses/" + encodeUrlPathSegment(series.getCatalogId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SeriesController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Series());
        return "serieses/create";
    }
    
    @RequestMapping(value = "/{catalogId}", produces = "text/html")
    public String SeriesController.show(@PathVariable("catalogId") Integer catalogId, Model uiModel) {
        uiModel.addAttribute("series", seriesService.findSeries(catalogId));
        uiModel.addAttribute("itemId", catalogId);
        return "serieses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SeriesController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("serieses", seriesService.findSeriesEntries(firstResult, sizeNo));
            float nrOfPages = (float) seriesService.countAllSerieses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("serieses", seriesService.findAllSerieses());
        }
        return "serieses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SeriesController.update(@Valid Series series, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, series);
            return "serieses/update";
        }
        uiModel.asMap().clear();
        seriesService.updateSeries(series);
        return "redirect:/serieses/" + encodeUrlPathSegment(series.getCatalogId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{catalogId}", params = "form", produces = "text/html")
    public String SeriesController.updateForm(@PathVariable("catalogId") Integer catalogId, Model uiModel) {
        populateEditForm(uiModel, seriesService.findSeries(catalogId));
        return "serieses/update";
    }
    
    @RequestMapping(value = "/{catalogId}", method = RequestMethod.DELETE, produces = "text/html")
    public String SeriesController.delete(@PathVariable("catalogId") Integer catalogId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Series series = seriesService.findSeries(catalogId);
        seriesService.deleteSeries(series);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/serieses";
    }
    
    void SeriesController.populateEditForm(Model uiModel, Series series) {
        uiModel.addAttribute("series", series);
        uiModel.addAttribute("catalogs", catalogService.findAllCatalogs());
        uiModel.addAttribute("seriesdescrs", seriesDescrService.findAllSeriesDescrs());
        uiModel.addAttribute("topics", topicService.findAllTopics());
    }
    
    String SeriesController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
