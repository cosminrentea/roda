// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.CollectionModelType;
import ro.roda.Instance;
import ro.roda.Methodology;
import ro.roda.TimeMethType;
import ro.roda.web.MethodologyController;

privileged aspect MethodologyController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String MethodologyController.create(@Valid Methodology methodology, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, methodology);
            return "methodologys/create";
        }
        uiModel.asMap().clear();
        methodology.persist();
        return "redirect:/methodologys/" + encodeUrlPathSegment(methodology.getInstanceId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String MethodologyController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Methodology());
        return "methodologys/create";
    }
    
    @RequestMapping(value = "/{instanceId}", produces = "text/html")
    public String MethodologyController.show(@PathVariable("instanceId") Integer instanceId, Model uiModel) {
        uiModel.addAttribute("methodology", Methodology.findMethodology(instanceId));
        uiModel.addAttribute("itemId", instanceId);
        return "methodologys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String MethodologyController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("methodologys", Methodology.findMethodologyEntries(firstResult, sizeNo));
            float nrOfPages = (float) Methodology.countMethodologys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("methodologys", Methodology.findAllMethodologys());
        }
        return "methodologys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String MethodologyController.update(@Valid Methodology methodology, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, methodology);
            return "methodologys/update";
        }
        uiModel.asMap().clear();
        methodology.merge();
        return "redirect:/methodologys/" + encodeUrlPathSegment(methodology.getInstanceId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{instanceId}", params = "form", produces = "text/html")
    public String MethodologyController.updateForm(@PathVariable("instanceId") Integer instanceId, Model uiModel) {
        populateEditForm(uiModel, Methodology.findMethodology(instanceId));
        return "methodologys/update";
    }
    
    @RequestMapping(value = "/{instanceId}", method = RequestMethod.DELETE, produces = "text/html")
    public String MethodologyController.delete(@PathVariable("instanceId") Integer instanceId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Methodology methodology = Methodology.findMethodology(instanceId);
        methodology.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/methodologys";
    }
    
    void MethodologyController.populateEditForm(Model uiModel, Methodology methodology) {
        uiModel.addAttribute("methodology", methodology);
        uiModel.addAttribute("collectionmodeltypes", CollectionModelType.findAllCollectionModelTypes());
        uiModel.addAttribute("instances", Instance.findAllInstances());
        uiModel.addAttribute("timemethtypes", TimeMethType.findAllTimeMethTypes());
    }
    
    String MethodologyController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
