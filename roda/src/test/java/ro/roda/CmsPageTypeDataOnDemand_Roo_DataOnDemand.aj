// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import ro.roda.CmsPageType;
import ro.roda.CmsPageTypeDataOnDemand;

privileged aspect CmsPageTypeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CmsPageTypeDataOnDemand: @Component;
    
    private Random CmsPageTypeDataOnDemand.rnd = new SecureRandom();
    
    private List<CmsPageType> CmsPageTypeDataOnDemand.data;
    
    public CmsPageType CmsPageTypeDataOnDemand.getNewTransientCmsPageType(int index) {
        CmsPageType obj = new CmsPageType();
        setDescription(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void CmsPageTypeDataOnDemand.setDescription(CmsPageType obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void CmsPageTypeDataOnDemand.setName(CmsPageType obj, int index) {
        String name = "name_" + index;
        if (name.length() > 200) {
            name = name.substring(0, 200);
        }
        obj.setName(name);
    }
    
    public CmsPageType CmsPageTypeDataOnDemand.getSpecificCmsPageType(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CmsPageType obj = data.get(index);
        Integer id = obj.getId();
        return CmsPageType.findCmsPageType(id);
    }
    
    public CmsPageType CmsPageTypeDataOnDemand.getRandomCmsPageType() {
        init();
        CmsPageType obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return CmsPageType.findCmsPageType(id);
    }
    
    public boolean CmsPageTypeDataOnDemand.modifyCmsPageType(CmsPageType obj) {
        return false;
    }
    
    public void CmsPageTypeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = CmsPageType.findCmsPageTypeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CmsPageType' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CmsPageType>();
        for (int i = 0; i < 10; i++) {
            CmsPageType obj = getNewTransientCmsPageType(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
