// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Person;
import ro.roda.PersonDataOnDemand;
import ro.roda.Source;
import ro.roda.SourceContactMethod;
import ro.roda.SourceContactMethodDataOnDemand;
import ro.roda.SourceContacts;
import ro.roda.SourceContactsDataOnDemand;
import ro.roda.SourceDataOnDemand;
import ro.roda.service.SourceContactsService;

privileged aspect SourceContactsDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SourceContactsDataOnDemand: @Component;
    
    private Random SourceContactsDataOnDemand.rnd = new SecureRandom();
    
    private List<SourceContacts> SourceContactsDataOnDemand.data;
    
    @Autowired
    PersonDataOnDemand SourceContactsDataOnDemand.personDataOnDemand;
    
    @Autowired
    SourceContactMethodDataOnDemand SourceContactsDataOnDemand.sourceContactMethodDataOnDemand;
    
    @Autowired
    SourceDataOnDemand SourceContactsDataOnDemand.sourceDataOnDemand;
    
    @Autowired
    SourceContactsService SourceContactsDataOnDemand.sourceContactsService;
    
    public SourceContacts SourceContactsDataOnDemand.getNewTransientSourceContacts(int index) {
        SourceContacts obj = new SourceContacts();
        setContactDate(obj, index);
        setFollowup(obj, index);
        setPersonId(obj, index);
        setSourceContactMethodId(obj, index);
        setSourceId(obj, index);
        setSynopsis(obj, index);
        return obj;
    }
    
    public void SourceContactsDataOnDemand.setContactDate(SourceContacts obj, int index) {
        Calendar contactDate = Calendar.getInstance();
        obj.setContactDate(contactDate);
    }
    
    public void SourceContactsDataOnDemand.setFollowup(SourceContacts obj, int index) {
        Integer followup = new Integer(index);
        obj.setFollowup(followup);
    }
    
    public void SourceContactsDataOnDemand.setPersonId(SourceContacts obj, int index) {
        Person personId = personDataOnDemand.getRandomPerson();
        obj.setPersonId(personId);
    }
    
    public void SourceContactsDataOnDemand.setSourceContactMethodId(SourceContacts obj, int index) {
        SourceContactMethod sourceContactMethodId = sourceContactMethodDataOnDemand.getRandomSourceContactMethod();
        obj.setSourceContactMethodId(sourceContactMethodId);
    }
    
    public void SourceContactsDataOnDemand.setSourceId(SourceContacts obj, int index) {
        Source sourceId = sourceDataOnDemand.getRandomSource();
        obj.setSourceId(sourceId);
    }
    
    public void SourceContactsDataOnDemand.setSynopsis(SourceContacts obj, int index) {
        String synopsis = "synopsis_" + index;
        obj.setSynopsis(synopsis);
    }
    
    public SourceContacts SourceContactsDataOnDemand.getSpecificSourceContacts(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SourceContacts obj = data.get(index);
        Integer id = obj.getId();
        return sourceContactsService.findSourceContacts(id);
    }
    
    public SourceContacts SourceContactsDataOnDemand.getRandomSourceContacts() {
        init();
        SourceContacts obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return sourceContactsService.findSourceContacts(id);
    }
    
    public boolean SourceContactsDataOnDemand.modifySourceContacts(SourceContacts obj) {
        return false;
    }
    
    public void SourceContactsDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = sourceContactsService.findSourceContactsEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SourceContacts' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SourceContacts>();
        for (int i = 0; i < 10; i++) {
            SourceContacts obj = getNewTransientSourceContacts(i);
            try {
                sourceContactsService.saveSourceContacts(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
