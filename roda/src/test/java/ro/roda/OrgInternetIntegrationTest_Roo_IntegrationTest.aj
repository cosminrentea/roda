// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.util.List;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.transaction.annotation.Transactional;
import ro.roda.OrgInternetDataOnDemand;
import ro.roda.OrgInternetIntegrationTest;
import ro.roda.OrgInternetPK;
import ro.roda.service.OrgInternetService;

privileged aspect OrgInternetIntegrationTest_Roo_IntegrationTest {
    
    declare @type: OrgInternetIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: OrgInternetIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    declare @type: OrgInternetIntegrationTest: @Transactional;
    
    @Autowired
    OrgInternetDataOnDemand OrgInternetIntegrationTest.dod;
    
    @Autowired
    OrgInternetService OrgInternetIntegrationTest.orgInternetService;
    
    @Test
    public void OrgInternetIntegrationTest.testCountAllOrgInternets() {
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to initialize correctly", dod.getRandomOrgInternet());
        long count = orgInternetService.countAllOrgInternets();
        Assert.assertTrue("Counter for 'OrgInternet' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void OrgInternetIntegrationTest.testFindOrgInternet() {
        OrgInternet obj = dod.getRandomOrgInternet();
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to initialize correctly", obj);
        OrgInternetPK id = obj.getId();
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to provide an identifier", id);
        obj = orgInternetService.findOrgInternet(id);
        Assert.assertNotNull("Find method for 'OrgInternet' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'OrgInternet' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void OrgInternetIntegrationTest.testFindAllOrgInternets() {
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to initialize correctly", dod.getRandomOrgInternet());
        long count = orgInternetService.countAllOrgInternets();
        Assert.assertTrue("Too expensive to perform a find all test for 'OrgInternet', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<OrgInternet> result = orgInternetService.findAllOrgInternets();
        Assert.assertNotNull("Find all method for 'OrgInternet' illegally returned null", result);
        Assert.assertTrue("Find all method for 'OrgInternet' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void OrgInternetIntegrationTest.testFindOrgInternetEntries() {
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to initialize correctly", dod.getRandomOrgInternet());
        long count = orgInternetService.countAllOrgInternets();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<OrgInternet> result = orgInternetService.findOrgInternetEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'OrgInternet' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'OrgInternet' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void OrgInternetIntegrationTest.testSaveOrgInternet() {
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to initialize correctly", dod.getRandomOrgInternet());
        OrgInternet obj = dod.getNewTransientOrgInternet(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to provide a new transient entity", obj);
        orgInternetService.saveOrgInternet(obj);
        obj.flush();
        Assert.assertNotNull("Expected 'OrgInternet' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void OrgInternetIntegrationTest.testDeleteOrgInternet() {
        OrgInternet obj = dod.getRandomOrgInternet();
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to initialize correctly", obj);
        OrgInternetPK id = obj.getId();
        Assert.assertNotNull("Data on demand for 'OrgInternet' failed to provide an identifier", id);
        obj = orgInternetService.findOrgInternet(id);
        orgInternetService.deleteOrgInternet(obj);
        obj.flush();
        Assert.assertNull("Failed to remove 'OrgInternet' with identifier '" + id + "'", orgInternetService.findOrgInternet(id));
    }
    
}
