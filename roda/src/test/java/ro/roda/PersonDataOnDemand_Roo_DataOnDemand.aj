// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Person;
import ro.roda.PersonDataOnDemand;
import ro.roda.PrefixDataOnDemand;
import ro.roda.SuffixDataOnDemand;

privileged aspect PersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonDataOnDemand: @Component;
    
    private Random PersonDataOnDemand.rnd = new SecureRandom();
    
    private List<Person> PersonDataOnDemand.data;
    
    @Autowired
    private PrefixDataOnDemand PersonDataOnDemand.prefixDataOnDemand;
    
    @Autowired
    private SuffixDataOnDemand PersonDataOnDemand.suffixDataOnDemand;
    
    public Person PersonDataOnDemand.getNewTransientPerson(int index) {
        Person obj = new Person();
        setFname(obj, index);
        setLname(obj, index);
        setMname(obj, index);
        return obj;
    }
    
    public void PersonDataOnDemand.setFname(Person obj, int index) {
        String fname = "fname_" + index;
        if (fname.length() > 100) {
            fname = fname.substring(0, 100);
        }
        obj.setFname(fname);
    }
    
    public void PersonDataOnDemand.setLname(Person obj, int index) {
        String lname = "lname_" + index;
        if (lname.length() > 100) {
            lname = lname.substring(0, 100);
        }
        obj.setLname(lname);
    }
    
    public void PersonDataOnDemand.setMname(Person obj, int index) {
        String mname = "mname_" + index;
        if (mname.length() > 100) {
            mname = mname.substring(0, 100);
        }
        obj.setMname(mname);
    }
    
    public Person PersonDataOnDemand.getSpecificPerson(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Person obj = data.get(index);
        Integer id = obj.getId();
        return Person.findPerson(id);
    }
    
    public Person PersonDataOnDemand.getRandomPerson() {
        init();
        Person obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Person.findPerson(id);
    }
    
    public boolean PersonDataOnDemand.modifyPerson(Person obj) {
        return false;
    }
    
    public void PersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Person.findPersonEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Person' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Person>();
        for (int i = 0; i < 10; i++) {
            Person obj = getNewTransientPerson(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
