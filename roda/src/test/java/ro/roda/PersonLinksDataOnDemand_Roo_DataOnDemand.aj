// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.math.BigDecimal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.PersonDataOnDemand;
import ro.roda.PersonLinks;
import ro.roda.PersonLinksDataOnDemand;
import ro.roda.UserDataOnDemand;

privileged aspect PersonLinksDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonLinksDataOnDemand: @Component;
    
    private Random PersonLinksDataOnDemand.rnd = new SecureRandom();
    
    private List<PersonLinks> PersonLinksDataOnDemand.data;
    
    @Autowired
    private PersonDataOnDemand PersonLinksDataOnDemand.personDataOnDemand;
    
    @Autowired
    private UserDataOnDemand PersonLinksDataOnDemand.userDataOnDemand;
    
    public PersonLinks PersonLinksDataOnDemand.getNewTransientPersonLinks(int index) {
        PersonLinks obj = new PersonLinks();
        setEmailscore(obj, index);
        setNamescore(obj, index);
        setSimscore(obj, index);
        setStatus(obj, index);
        setStatusTime(obj, index);
        return obj;
    }
    
    public void PersonLinksDataOnDemand.setEmailscore(PersonLinks obj, int index) {
        BigDecimal emailscore = BigDecimal.valueOf(index);
        if (emailscore.compareTo(new BigDecimal("99999999.99")) == 1) {
            emailscore = new BigDecimal("99999999.99");
        }
        obj.setEmailscore(emailscore);
    }
    
    public void PersonLinksDataOnDemand.setNamescore(PersonLinks obj, int index) {
        BigDecimal namescore = BigDecimal.valueOf(index);
        if (namescore.compareTo(new BigDecimal("99999999.99")) == 1) {
            namescore = new BigDecimal("99999999.99");
        }
        obj.setNamescore(namescore);
    }
    
    public void PersonLinksDataOnDemand.setSimscore(PersonLinks obj, int index) {
        BigDecimal simscore = BigDecimal.valueOf(index);
        if (simscore.compareTo(new BigDecimal("99999999.99")) == 1) {
            simscore = new BigDecimal("99999999.99");
        }
        obj.setSimscore(simscore);
    }
    
    public void PersonLinksDataOnDemand.setStatus(PersonLinks obj, int index) {
        Integer status = new Integer(index);
        obj.setStatus(status);
    }
    
    public void PersonLinksDataOnDemand.setStatusTime(PersonLinks obj, int index) {
        Date statusTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setStatusTime(statusTime);
    }
    
    public PersonLinks PersonLinksDataOnDemand.getSpecificPersonLinks(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PersonLinks obj = data.get(index);
        Integer id = obj.getId();
        return PersonLinks.findPersonLinks(id);
    }
    
    public PersonLinks PersonLinksDataOnDemand.getRandomPersonLinks() {
        init();
        PersonLinks obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return PersonLinks.findPersonLinks(id);
    }
    
    public boolean PersonLinksDataOnDemand.modifyPersonLinks(PersonLinks obj) {
        return false;
    }
    
    public void PersonLinksDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PersonLinks.findPersonLinksEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PersonLinks' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PersonLinks>();
        for (int i = 0; i < 10; i++) {
            PersonLinks obj = getNewTransientPersonLinks(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
