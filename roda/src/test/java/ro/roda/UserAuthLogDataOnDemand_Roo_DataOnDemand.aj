// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.UserAuthLog;
import ro.roda.UserAuthLogDataOnDemand;
import ro.roda.UserAuthLogPK;
import ro.roda.UserDataOnDemand;

privileged aspect UserAuthLogDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserAuthLogDataOnDemand: @Component;
    
    private Random UserAuthLogDataOnDemand.rnd = new SecureRandom();
    
    private List<UserAuthLog> UserAuthLogDataOnDemand.data;
    
    @Autowired
    private UserDataOnDemand UserAuthLogDataOnDemand.userDataOnDemand;
    
    public UserAuthLog UserAuthLogDataOnDemand.getNewTransientUserAuthLog(int index) {
        UserAuthLog obj = new UserAuthLog();
        setEmbeddedIdClass(obj, index);
        setAction(obj, index);
        setCredentialIdentifier(obj, index);
        setCredentialProvider(obj, index);
        setErrorMessage(obj, index);
        return obj;
    }
    
    public void UserAuthLogDataOnDemand.setEmbeddedIdClass(UserAuthLog obj, int index) {
        Integer userId = new Integer(index);
        Date timestamp = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        
        UserAuthLogPK embeddedIdClass = new UserAuthLogPK(userId, timestamp);
        obj.setId(embeddedIdClass);
    }
    
    public void UserAuthLogDataOnDemand.setAction(UserAuthLog obj, int index) {
        String action = "action_" + index;
        if (action.length() > 30) {
            action = action.substring(0, 30);
        }
        obj.setAction(action);
    }
    
    public void UserAuthLogDataOnDemand.setCredentialIdentifier(UserAuthLog obj, int index) {
        String credentialIdentifier = "credentialIdentifier_" + index;
        obj.setCredentialIdentifier(credentialIdentifier);
    }
    
    public void UserAuthLogDataOnDemand.setCredentialProvider(UserAuthLog obj, int index) {
        String credentialProvider = "credentialProvider_" + index;
        obj.setCredentialProvider(credentialProvider);
    }
    
    public void UserAuthLogDataOnDemand.setErrorMessage(UserAuthLog obj, int index) {
        String errorMessage = "errorMessage_" + index;
        obj.setErrorMessage(errorMessage);
    }
    
    public UserAuthLog UserAuthLogDataOnDemand.getSpecificUserAuthLog(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserAuthLog obj = data.get(index);
        UserAuthLogPK id = obj.getId();
        return UserAuthLog.findUserAuthLog(id);
    }
    
    public UserAuthLog UserAuthLogDataOnDemand.getRandomUserAuthLog() {
        init();
        UserAuthLog obj = data.get(rnd.nextInt(data.size()));
        UserAuthLogPK id = obj.getId();
        return UserAuthLog.findUserAuthLog(id);
    }
    
    public boolean UserAuthLogDataOnDemand.modifyUserAuthLog(UserAuthLog obj) {
        return false;
    }
    
    public void UserAuthLogDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UserAuthLog.findUserAuthLogEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserAuthLog' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserAuthLog>();
        for (int i = 0; i < 10; i++) {
            UserAuthLog obj = getNewTransientUserAuthLog(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
