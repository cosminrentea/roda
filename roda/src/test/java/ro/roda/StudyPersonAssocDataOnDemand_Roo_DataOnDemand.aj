// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.StudyPersonAssoc;
import ro.roda.StudyPersonAssocDataOnDemand;
import ro.roda.service.StudyPersonAssocService;

privileged aspect StudyPersonAssocDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudyPersonAssocDataOnDemand: @Component;
    
    private Random StudyPersonAssocDataOnDemand.rnd = new SecureRandom();
    
    private List<StudyPersonAssoc> StudyPersonAssocDataOnDemand.data;
    
    @Autowired
    StudyPersonAssocService StudyPersonAssocDataOnDemand.studyPersonAssocService;
    
    public StudyPersonAssoc StudyPersonAssocDataOnDemand.getNewTransientStudyPersonAssoc(int index) {
        StudyPersonAssoc obj = new StudyPersonAssoc();
        setAsocDescription(obj, index);
        setAsocName(obj, index);
        return obj;
    }
    
    public void StudyPersonAssocDataOnDemand.setAsocDescription(StudyPersonAssoc obj, int index) {
        String asocDescription = "asocDescription_" + index;
        obj.setAsocDescription(asocDescription);
    }
    
    public void StudyPersonAssocDataOnDemand.setAsocName(StudyPersonAssoc obj, int index) {
        String asocName = "asocName_" + index;
        if (asocName.length() > 100) {
            asocName = asocName.substring(0, 100);
        }
        obj.setAsocName(asocName);
    }
    
    public StudyPersonAssoc StudyPersonAssocDataOnDemand.getSpecificStudyPersonAssoc(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StudyPersonAssoc obj = data.get(index);
        Integer id = obj.getId();
        return studyPersonAssocService.findStudyPersonAssoc(id);
    }
    
    public StudyPersonAssoc StudyPersonAssocDataOnDemand.getRandomStudyPersonAssoc() {
        init();
        StudyPersonAssoc obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return studyPersonAssocService.findStudyPersonAssoc(id);
    }
    
    public boolean StudyPersonAssocDataOnDemand.modifyStudyPersonAssoc(StudyPersonAssoc obj) {
        return false;
    }
    
    public void StudyPersonAssocDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = studyPersonAssocService.findStudyPersonAssocEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StudyPersonAssoc' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StudyPersonAssoc>();
        for (int i = 0; i < 10; i++) {
            StudyPersonAssoc obj = getNewTransientStudyPersonAssoc(i);
            try {
                studyPersonAssocService.saveStudyPersonAssoc(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
