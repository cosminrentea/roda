// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import ro.roda.domain.Source;
import ro.roda.web.SourceController;

privileged aspect SourceController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{orgId}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SourceController.showJson(@PathVariable("orgId") Integer orgId) {
        Source source = sourceService.findSource(orgId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (source == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(source.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SourceController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Source> result = sourceService.findAllSources();
        return new ResponseEntity<String>(Source.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SourceController.createFromJson(@RequestBody String json) {
        Source source = Source.fromJsonToSource(json);
        sourceService.saveSource(source);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SourceController.createFromJsonArray(@RequestBody String json) {
        for (Source source: Source.fromJsonArrayToSources(json)) {
            sourceService.saveSource(source);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SourceController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Source source = Source.fromJsonToSource(json);
        if (sourceService.updateSource(source) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SourceController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Source source: Source.fromJsonArrayToSources(json)) {
            if (sourceService.updateSource(source) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{orgId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SourceController.deleteFromJson(@PathVariable("orgId") Integer orgId) {
        Source source = sourceService.findSource(orgId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (source == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        sourceService.deleteSource(source);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
