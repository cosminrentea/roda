// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.FileAcl;
import ro.roda.FileAclDataOnDemand;
import ro.roda.FileAclPK;
import ro.roda.FileDataOnDemand;

privileged aspect FileAclDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FileAclDataOnDemand: @Component;
    
    private Random FileAclDataOnDemand.rnd = new SecureRandom();
    
    private List<FileAcl> FileAclDataOnDemand.data;
    
    @Autowired
    private FileDataOnDemand FileAclDataOnDemand.fileDataOnDemand;
    
    public FileAcl FileAclDataOnDemand.getNewTransientFileAcl(int index) {
        FileAcl obj = new FileAcl();
        setEmbeddedIdClass(obj, index);
        setDelete(obj, index);
        setRead(obj, index);
        setUpdate(obj, index);
        return obj;
    }
    
    public void FileAclDataOnDemand.setEmbeddedIdClass(FileAcl obj, int index) {
        Integer documentId = new Integer(index);
        Integer aroId = new Integer(index);
        Integer aroType = new Integer(index);
        
        FileAclPK embeddedIdClass = new FileAclPK(documentId, aroId, aroType);
        obj.setId(embeddedIdClass);
    }
    
    public void FileAclDataOnDemand.setDelete(FileAcl obj, int index) {
        Boolean delete = true;
        obj.setDelete(delete);
    }
    
    public void FileAclDataOnDemand.setRead(FileAcl obj, int index) {
        Boolean read = true;
        obj.setRead(read);
    }
    
    public void FileAclDataOnDemand.setUpdate(FileAcl obj, int index) {
        Boolean update = true;
        obj.setUpdate(update);
    }
    
    public FileAcl FileAclDataOnDemand.getSpecificFileAcl(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FileAcl obj = data.get(index);
        FileAclPK id = obj.getId();
        return FileAcl.findFileAcl(id);
    }
    
    public FileAcl FileAclDataOnDemand.getRandomFileAcl() {
        init();
        FileAcl obj = data.get(rnd.nextInt(data.size()));
        FileAclPK id = obj.getId();
        return FileAcl.findFileAcl(id);
    }
    
    public boolean FileAclDataOnDemand.modifyFileAcl(FileAcl obj) {
        return false;
    }
    
    public void FileAclDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FileAcl.findFileAclEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FileAcl' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FileAcl>();
        for (int i = 0; i < 10; i++) {
            FileAcl obj = getNewTransientFileAcl(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
