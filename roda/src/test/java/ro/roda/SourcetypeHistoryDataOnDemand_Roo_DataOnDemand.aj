// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Rodauser;
import ro.roda.RodauserDataOnDemand;
import ro.roda.Source;
import ro.roda.SourceDataOnDemand;
import ro.roda.Sourcetype;
import ro.roda.SourcetypeDataOnDemand;
import ro.roda.SourcetypeHistory;
import ro.roda.SourcetypeHistoryDataOnDemand;
import ro.roda.service.SourcetypeHistoryService;

privileged aspect SourcetypeHistoryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SourcetypeHistoryDataOnDemand: @Component;
    
    private Random SourcetypeHistoryDataOnDemand.rnd = new SecureRandom();
    
    private List<SourcetypeHistory> SourcetypeHistoryDataOnDemand.data;
    
    @Autowired
    RodauserDataOnDemand SourcetypeHistoryDataOnDemand.rodauserDataOnDemand;
    
    @Autowired
    SourceDataOnDemand SourcetypeHistoryDataOnDemand.sourceDataOnDemand;
    
    @Autowired
    SourcetypeDataOnDemand SourcetypeHistoryDataOnDemand.sourcetypeDataOnDemand;
    
    @Autowired
    SourcetypeHistoryService SourcetypeHistoryDataOnDemand.sourcetypeHistoryService;
    
    public SourcetypeHistory SourcetypeHistoryDataOnDemand.getNewTransientSourcetypeHistory(int index) {
        SourcetypeHistory obj = new SourcetypeHistory();
        setAddedBy(obj, index);
        setDateend(obj, index);
        setDatestart(obj, index);
        setOrgId(obj, index);
        setSourcetypeId(obj, index);
        return obj;
    }
    
    public void SourcetypeHistoryDataOnDemand.setAddedBy(SourcetypeHistory obj, int index) {
        Rodauser addedBy = rodauserDataOnDemand.getRandomRodauser();
        obj.setAddedBy(addedBy);
    }
    
    public void SourcetypeHistoryDataOnDemand.setDateend(SourcetypeHistory obj, int index) {
        Calendar dateend = Calendar.getInstance();
        obj.setDateend(dateend);
    }
    
    public void SourcetypeHistoryDataOnDemand.setDatestart(SourcetypeHistory obj, int index) {
        Calendar datestart = Calendar.getInstance();
        obj.setDatestart(datestart);
    }
    
    public void SourcetypeHistoryDataOnDemand.setOrgId(SourcetypeHistory obj, int index) {
        Source orgId = sourceDataOnDemand.getRandomSource();
        obj.setOrgId(orgId);
    }
    
    public void SourcetypeHistoryDataOnDemand.setSourcetypeId(SourcetypeHistory obj, int index) {
        Sourcetype sourcetypeId = sourcetypeDataOnDemand.getRandomSourcetype();
        obj.setSourcetypeId(sourcetypeId);
    }
    
    public SourcetypeHistory SourcetypeHistoryDataOnDemand.getSpecificSourcetypeHistory(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SourcetypeHistory obj = data.get(index);
        Integer id = obj.getId();
        return sourcetypeHistoryService.findSourcetypeHistory(id);
    }
    
    public SourcetypeHistory SourcetypeHistoryDataOnDemand.getRandomSourcetypeHistory() {
        init();
        SourcetypeHistory obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return sourcetypeHistoryService.findSourcetypeHistory(id);
    }
    
    public boolean SourcetypeHistoryDataOnDemand.modifySourcetypeHistory(SourcetypeHistory obj) {
        return false;
    }
    
    public void SourcetypeHistoryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = sourcetypeHistoryService.findSourcetypeHistoryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SourcetypeHistory' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SourcetypeHistory>();
        for (int i = 0; i < 10; i++) {
            SourcetypeHistory obj = getNewTransientSourcetypeHistory(i);
            try {
                sourcetypeHistoryService.saveSourcetypeHistory(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
