// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import ro.roda.Country;
import ro.roda.CountryDataOnDemand;

privileged aspect CountryDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CountryDataOnDemand: @Component;
    
    private Random CountryDataOnDemand.rnd = new SecureRandom();
    
    private List<Country> CountryDataOnDemand.data;
    
    public Country CountryDataOnDemand.getNewTransientCountry(int index) {
        Country obj = new Country();
        setAlpha3(obj, index);
        setName(obj, index);
        return obj;
    }
    
    public void CountryDataOnDemand.setAlpha3(Country obj, int index) {
        String alpha3 = "a_" + index;
        if (alpha3.length() > 3) {
            alpha3 = new Random().nextInt(10) + alpha3.substring(1, 3);
        }
        obj.setAlpha3(alpha3);
    }
    
    public void CountryDataOnDemand.setName(Country obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = new Random().nextInt(10) + name.substring(1, 100);
        }
        obj.setName(name);
    }
    
    public Country CountryDataOnDemand.getSpecificCountry(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Country obj = data.get(index);
        String id = obj.getId();
        return Country.findCountry(id);
    }
    
    public Country CountryDataOnDemand.getRandomCountry() {
        init();
        Country obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getId();
        return Country.findCountry(id);
    }
    
    public boolean CountryDataOnDemand.modifyCountry(Country obj) {
        return false;
    }
    
    public void CountryDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Country.findCountryEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Country' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Country>();
        for (int i = 0; i < 10; i++) {
            Country obj = getNewTransientCountry(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
