// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Catalog;
import ro.roda.CatalogDataOnDemand;
import ro.roda.UserDataOnDemand;

privileged aspect CatalogDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CatalogDataOnDemand: @Component;
    
    private Random CatalogDataOnDemand.rnd = new SecureRandom();
    
    private List<Catalog> CatalogDataOnDemand.data;
    
    @Autowired
    private UserDataOnDemand CatalogDataOnDemand.userDataOnDemand;
    
    public Catalog CatalogDataOnDemand.getNewTransientCatalog(int index) {
        Catalog obj = new Catalog();
        setAdded(obj, index);
        setName(obj, index);
        setParent(obj, index);
        return obj;
    }
    
    public void CatalogDataOnDemand.setAdded(Catalog obj, int index) {
        Date added = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAdded(added);
    }
    
    public void CatalogDataOnDemand.setName(Catalog obj, int index) {
        String name = "name_" + index;
        if (name.length() > 200) {
            name = name.substring(0, 200);
        }
        obj.setName(name);
    }
    
    public void CatalogDataOnDemand.setParent(Catalog obj, int index) {
        Catalog parent = obj;
        obj.setParent(parent);
    }
    
    public Catalog CatalogDataOnDemand.getSpecificCatalog(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Catalog obj = data.get(index);
        Integer id = obj.getId();
        return Catalog.findCatalog(id);
    }
    
    public Catalog CatalogDataOnDemand.getRandomCatalog() {
        init();
        Catalog obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return Catalog.findCatalog(id);
    }
    
    public boolean CatalogDataOnDemand.modifyCatalog(Catalog obj) {
        return false;
    }
    
    public void CatalogDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Catalog.findCatalogEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Catalog' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Catalog>();
        for (int i = 0; i < 10; i++) {
            Catalog obj = getNewTransientCatalog(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
