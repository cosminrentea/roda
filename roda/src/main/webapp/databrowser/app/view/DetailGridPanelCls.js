/*
 * File: app/view/DetailGridPanelCls.js
 *
 * This file was generated by Sencha Architect version 2.2.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('databrowser.view.DetailGridPanelCls', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.detailgridpanelcls1',

    requires: [
        'databrowser.view.override.DetailGridPanelCls'
    ],

    height: 405,
    id: 'DetailsGridPanel',
    itemId: 'DetailsGridPanel',
    width: 509,
    hideHeaders: true,
    store: 'CatalogDetailStore',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'numbercolumn',
                    dataIndex: 'an',
                    groupable: true,
                    text: 'An',
                    format: '0000'
                },
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return Ext.String.format(
                        '<b><a href="http://localhost:8080/roda" target="_blank">{0}</a></b>',
                        value,
                        record.data.name
                        );
                    },
                    width: 235,
                    dataIndex: 'name',
                    groupable: true,
                    text: 'Titlu',
                    flex: 1
                }
            ],
            viewConfig: {
                frame: true,
                id: 'DetailsGridView',
                trackOver: false,
                stripeRows: false
            },
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    id: 'DataBrowserToolbar',
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'LocalSearchTextField',
                            width: 190,
                            emptyText: 'Cautare locala'
                        },
                        {
                            xtype: 'button',
                            id: 'AdvancedSearchButton',
                            width: 156,
                            text: 'Cautare avansata'
                        },
                        {
                            xtype: 'tbseparator',
                            id: 'DataBrowserToolbarSeparator1'
                        },
                        {
                            xtype: 'buttongroup',
                            autoRender: false,
                            id: 'SMCButtonGroup',
                            width: 72,
                            header: false,
                            title: 'Buttons',
                            columns: 3,
                            items: [
                                {
                                    xtype: 'button',
                                    id: 'SButton',
                                    text: 'S',
                                    listeners: {
                                        click: {
                                            fn: me.onSButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'MButton',
                                    text: 'M',
                                    listeners: {
                                        click: {
                                            fn: me.onMButtonClick,
                                            scope: me
                                        }
                                    }
                                },
                                {
                                    xtype: 'button',
                                    id: 'CButton',
                                    text: 'C',
                                    listeners: {
                                        click: {
                                            fn: me.onCButtonClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                },
                {
                    xtype: 'pagingtoolbar',
                    dock: 'bottom',
                    id: 'PagingToolbar',
                    width: 400,
                    afterPageText: 'din {0}',
                    beforePageText: 'Pagina',
                    displayInfo: true,
                    displayMsg: 'Afisare {0} - {1} din {2}',
                    emptyMsg: 'Nu exista date',
                    firstText: 'Prima pag.',
                    lastText: 'Ultima',
                    nextText: 'Prima',
                    prevText: 'Anterior',
                    refreshText: 'Actualizare',
                    store: 'CatalogDetailStore',
                    items: [
                        {
                            xtype: 'textfield',
                            id: 'NumberOfRecords',
                            width: 89,
                            fieldLabel: 'Inregistrari',
                            labelPad: 0,
                            labelWidth: 60,
                            value: 20,
                            enableKeyEvents: true,
                            vtype: '',
                            listeners: {
                                blur: {
                                    fn: me.onNumberOfRecordsBlur,
                                    scope: me
                                },
                                specialkey: {
                                    fn: me.onNumberOfRecordsSpecialkey,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onSButtonClick: function(button, e, eOpts) {

        //var gridPanel = Ext.getCmp('DetailsGridPanel');
        //gridPanel.columns[2].hidden = true;

        var preview = Ext.getCmp('DetailsGridView').getPlugin('preview');
        preview.toggleExpanded(false);

    },

    onMButtonClick: function(button, e, eOpts) {
        var gridPanel = Ext.getCmp('DetailsGridPanel');
        //gridPanel.columns[2].hidden = true;

        //var preview = Ext.getCmp('DetailsGridView').getPlugin('preview');
        //preview.toggleExpanded(false);
        //var previewAn = Ext.getCmp('DetailsGridView').getPlugin('previewAn');
        //preview.toggleExpanded(false);

        gridPanel.features = [{
            ftype: 'rowbody',
            setupRowData: function(record, rowIndex, rowValues) {
                var headerCt = this.view.headerCt,
                    colspan = headerCt.getColumnCount();
                // Usually you would style the my-body-class in CSS file
                return {
                    rowBody: record.get("author"),
                    rowBodyCls: this.rowBodyCls,
                    rowBodyColspan: colspan
                };
            }
        }];

        gridPanel.getView().refresh();


    },

    onCButtonClick: function(button, e, eOpts) {
        var preview = Ext.getCmp('DetailsGridView').getPlugin('preview');
        preview.toggleExpanded(true);
    },

    onNumberOfRecordsBlur: function(component, e, eOpts) {
        var gridPanel = Ext.getCmp('DetailsGridPanel');
        gridPanel.store.pageSize = parseInt(component.value, 10);   

        var pagingToolbar = Ext.getCmp('PagingToolbar');
        pagingToolbar.doRefresh();
    },

    onNumberOfRecordsSpecialkey: function(field, e, eOpts) {
        if(e.getKey()==e.ENTER)
        {
            var gridPanel = Ext.getCmp('DetailsGridPanel');
            gridPanel.store.pageSize = parseInt(field.value, 10);

            var pagingToolbar = Ext.getCmp('PagingToolbar');
            pagingToolbar.doRefresh();
        }  
    }

});