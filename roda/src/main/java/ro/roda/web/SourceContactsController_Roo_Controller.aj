// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.domain.SourceContacts;
import ro.roda.service.PersonService;
import ro.roda.service.SourceContactMethodService;
import ro.roda.service.SourceContactsService;
import ro.roda.service.SourceService;
import ro.roda.web.SourceContactsController;

privileged aspect SourceContactsController_Roo_Controller {
    
    @Autowired
    SourceContactsService SourceContactsController.sourceContactsService;
    
    @Autowired
    PersonService SourceContactsController.personService;
    
    @Autowired
    SourceService SourceContactsController.sourceService;
    
    @Autowired
    SourceContactMethodService SourceContactsController.sourceContactMethodService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SourceContactsController.create(@Valid SourceContacts sourceContacts, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, sourceContacts);
            return "sourcecontactses/create";
        }
        uiModel.asMap().clear();
        sourceContactsService.saveSourceContacts(sourceContacts);
        return "redirect:/sourcecontactses/" + encodeUrlPathSegment(sourceContacts.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SourceContactsController.createForm(Model uiModel) {
        populateEditForm(uiModel, new SourceContacts());
        return "sourcecontactses/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String SourceContactsController.show(@PathVariable("id") Integer id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("sourcecontacts", sourceContactsService.findSourceContacts(id));
        uiModel.addAttribute("itemId", id);
        return "sourcecontactses/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SourceContactsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("sourcecontactses", sourceContactsService.findSourceContactsEntries(firstResult, sizeNo));
            float nrOfPages = (float) sourceContactsService.countAllSourceContactses() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("sourcecontactses", sourceContactsService.findAllSourceContactses());
        }
        addDateTimeFormatPatterns(uiModel);
        return "sourcecontactses/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SourceContactsController.update(@Valid SourceContacts sourceContacts, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, sourceContacts);
            return "sourcecontactses/update";
        }
        uiModel.asMap().clear();
        sourceContactsService.updateSourceContacts(sourceContacts);
        return "redirect:/sourcecontactses/" + encodeUrlPathSegment(sourceContacts.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String SourceContactsController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, sourceContactsService.findSourceContacts(id));
        return "sourcecontactses/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String SourceContactsController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        SourceContacts sourceContacts = sourceContactsService.findSourceContacts(id);
        sourceContactsService.deleteSourceContacts(sourceContacts);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/sourcecontactses";
    }
    
    void SourceContactsController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("sourceContacts_contactdate_date_format", DateTimeFormat.patternForStyle("MM", LocaleContextHolder.getLocale()));
    }
    
    void SourceContactsController.populateEditForm(Model uiModel, SourceContacts sourceContacts) {
        uiModel.addAttribute("sourceContacts", sourceContacts);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("people", personService.findAllPeople());
        uiModel.addAttribute("sources", sourceService.findAllSources());
        uiModel.addAttribute("sourcecontactmethods", sourceContactMethodService.findAllSourceContactMethods());
    }
    
    String SourceContactsController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
