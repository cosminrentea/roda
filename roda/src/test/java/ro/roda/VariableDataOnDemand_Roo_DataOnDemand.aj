// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.FileDataOnDemand;
import ro.roda.Instance;
import ro.roda.InstanceDataOnDemand;
import ro.roda.SelectionVariableDataOnDemand;
import ro.roda.Variable;
import ro.roda.VariableDataOnDemand;
import ro.roda.service.VariableService;

privileged aspect VariableDataOnDemand_Roo_DataOnDemand {
    
    declare @type: VariableDataOnDemand: @Component;
    
    private Random VariableDataOnDemand.rnd = new SecureRandom();
    
    private List<Variable> VariableDataOnDemand.data;
    
    @Autowired
    FileDataOnDemand VariableDataOnDemand.fileDataOnDemand;
    
    @Autowired
    InstanceDataOnDemand VariableDataOnDemand.instanceDataOnDemand;
    
    @Autowired
    SelectionVariableDataOnDemand VariableDataOnDemand.selectionVariableDataOnDemand;
    
    @Autowired
    VariableService VariableDataOnDemand.variableService;
    
    public Variable VariableDataOnDemand.getNewTransientVariable(int index) {
        Variable obj = new Variable();
        setInstanceId(obj, index);
        setLabel(obj, index);
        setOperatorInstructions(obj, index);
        setOrderInInstance(obj, index);
        setType(obj, index);
        setTypeEditedNumber(obj, index);
        setTypeEditedText(obj, index);
        setTypeSelection(obj, index);
        return obj;
    }
    
    public void VariableDataOnDemand.setInstanceId(Variable obj, int index) {
        Instance instanceId = instanceDataOnDemand.getRandomInstance();
        obj.setInstanceId(instanceId);
    }
    
    public void VariableDataOnDemand.setLabel(Variable obj, int index) {
        String label = "label_" + index;
        obj.setLabel(label);
    }
    
    public void VariableDataOnDemand.setOperatorInstructions(Variable obj, int index) {
        String operatorInstructions = "operatorInstructions_" + index;
        obj.setOperatorInstructions(operatorInstructions);
    }
    
    public void VariableDataOnDemand.setOrderInInstance(Variable obj, int index) {
        Integer orderInInstance = new Integer(index);
        obj.setOrderInInstance(orderInInstance);
    }
    
    public void VariableDataOnDemand.setType(Variable obj, int index) {
        Short type = new Integer(index).shortValue();
        obj.setType(type);
    }
    
    public void VariableDataOnDemand.setTypeEditedNumber(Variable obj, int index) {
        Boolean typeEditedNumber = true;
        obj.setTypeEditedNumber(typeEditedNumber);
    }
    
    public void VariableDataOnDemand.setTypeEditedText(Variable obj, int index) {
        Boolean typeEditedText = true;
        obj.setTypeEditedText(typeEditedText);
    }
    
    public void VariableDataOnDemand.setTypeSelection(Variable obj, int index) {
        Boolean typeSelection = true;
        obj.setTypeSelection(typeSelection);
    }
    
    public Variable VariableDataOnDemand.getSpecificVariable(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Variable obj = data.get(index);
        Long id = obj.getId();
        return variableService.findVariable(id);
    }
    
    public Variable VariableDataOnDemand.getRandomVariable() {
        init();
        Variable obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return variableService.findVariable(id);
    }
    
    public boolean VariableDataOnDemand.modifyVariable(Variable obj) {
        return false;
    }
    
    public void VariableDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = variableService.findVariableEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Variable' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Variable>();
        for (int i = 0; i < 10; i++) {
            Variable obj = getNewTransientVariable(i);
            try {
                variableService.saveVariable(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
