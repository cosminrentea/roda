// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Country;
import ro.roda.CountryDataOnDemand;
import ro.roda.Region;
import ro.roda.RegionDataOnDemand;
import ro.roda.Regiontype;
import ro.roda.RegiontypeDataOnDemand;
import ro.roda.service.RegionService;

privileged aspect RegionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RegionDataOnDemand: @Component;
    
    private Random RegionDataOnDemand.rnd = new SecureRandom();
    
    private List<Region> RegionDataOnDemand.data;
    
    @Autowired
    CountryDataOnDemand RegionDataOnDemand.countryDataOnDemand;
    
    @Autowired
    RegiontypeDataOnDemand RegionDataOnDemand.regiontypeDataOnDemand;
    
    @Autowired
    RegionService RegionDataOnDemand.regionService;
    
    public Region RegionDataOnDemand.getNewTransientRegion(int index) {
        Region obj = new Region();
        setCountryId(obj, index);
        setName(obj, index);
        setRegionCode(obj, index);
        setRegionCodeName(obj, index);
        setRegiontypeId(obj, index);
        return obj;
    }
    
    public void RegionDataOnDemand.setCountryId(Region obj, int index) {
        Country countryId = countryDataOnDemand.getRandomCountry();
        obj.setCountryId(countryId);
    }
    
    public void RegionDataOnDemand.setName(Region obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void RegionDataOnDemand.setRegionCode(Region obj, int index) {
        String regionCode = "regionCode_" + index;
        if (regionCode.length() > 50) {
            regionCode = regionCode.substring(0, 50);
        }
        obj.setRegionCode(regionCode);
    }
    
    public void RegionDataOnDemand.setRegionCodeName(Region obj, int index) {
        String regionCodeName = "regionCodeName_" + index;
        if (regionCodeName.length() > 50) {
            regionCodeName = regionCodeName.substring(0, 50);
        }
        obj.setRegionCodeName(regionCodeName);
    }
    
    public void RegionDataOnDemand.setRegiontypeId(Region obj, int index) {
        Regiontype regiontypeId = regiontypeDataOnDemand.getRandomRegiontype();
        obj.setRegiontypeId(regiontypeId);
    }
    
    public Region RegionDataOnDemand.getSpecificRegion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Region obj = data.get(index);
        Integer id = obj.getId();
        return regionService.findRegion(id);
    }
    
    public Region RegionDataOnDemand.getRandomRegion() {
        init();
        Region obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return regionService.findRegion(id);
    }
    
    public boolean RegionDataOnDemand.modifyRegion(Region obj) {
        return false;
    }
    
    public void RegionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = regionService.findRegionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Region' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Region>();
        for (int i = 0; i < 10; i++) {
            Region obj = getNewTransientRegion(i);
            try {
                regionService.saveRegion(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
