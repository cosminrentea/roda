// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.LangDataOnDemand;
import ro.roda.StudyDataOnDemand;
import ro.roda.StudyDescr;
import ro.roda.StudyDescrDataOnDemand;
import ro.roda.StudyDescrPK;
import ro.roda.TitleTypeDataOnDemand;

privileged aspect StudyDescrDataOnDemand_Roo_DataOnDemand {
    
    declare @type: StudyDescrDataOnDemand: @Component;
    
    private Random StudyDescrDataOnDemand.rnd = new SecureRandom();
    
    private List<StudyDescr> StudyDescrDataOnDemand.data;
    
    @Autowired
    private LangDataOnDemand StudyDescrDataOnDemand.langDataOnDemand;
    
    @Autowired
    private StudyDataOnDemand StudyDescrDataOnDemand.studyDataOnDemand;
    
    @Autowired
    private TitleTypeDataOnDemand StudyDescrDataOnDemand.titleTypeDataOnDemand;
    
    public StudyDescr StudyDescrDataOnDemand.getNewTransientStudyDescr(int index) {
        StudyDescr obj = new StudyDescr();
        setEmbeddedIdClass(obj, index);
        setAbstract1(obj, index);
        setGrantDetails(obj, index);
        setTitle(obj, index);
        return obj;
    }
    
    public void StudyDescrDataOnDemand.setEmbeddedIdClass(StudyDescr obj, int index) {
        String langId = "l" + index;
        if (langId.length() > 2) {
            langId = new Random().nextInt(10) + langId.substring(1, 2);
        }
        Integer studyId = new Integer(index);
        
        StudyDescrPK embeddedIdClass = new StudyDescrPK(langId, studyId);
        obj.setId(embeddedIdClass);
    }
    
    public void StudyDescrDataOnDemand.setAbstract1(StudyDescr obj, int index) {
        String abstract1 = "abstract1_" + index;
        obj.setAbstract1(abstract1);
    }
    
    public void StudyDescrDataOnDemand.setGrantDetails(StudyDescr obj, int index) {
        String grantDetails = "grantDetails_" + index;
        obj.setGrantDetails(grantDetails);
    }
    
    public void StudyDescrDataOnDemand.setTitle(StudyDescr obj, int index) {
        String title = "title_" + index;
        if (title.length() > 300) {
            title = title.substring(0, 300);
        }
        obj.setTitle(title);
    }
    
    public StudyDescr StudyDescrDataOnDemand.getSpecificStudyDescr(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        StudyDescr obj = data.get(index);
        StudyDescrPK id = obj.getId();
        return StudyDescr.findStudyDescr(id);
    }
    
    public StudyDescr StudyDescrDataOnDemand.getRandomStudyDescr() {
        init();
        StudyDescr obj = data.get(rnd.nextInt(data.size()));
        StudyDescrPK id = obj.getId();
        return StudyDescr.findStudyDescr(id);
    }
    
    public boolean StudyDescrDataOnDemand.modifyStudyDescr(StudyDescr obj) {
        return false;
    }
    
    public void StudyDescrDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = StudyDescr.findStudyDescrEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'StudyDescr' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<StudyDescr>();
        for (int i = 0; i < 10; i++) {
            StudyDescr obj = getNewTransientStudyDescr(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
