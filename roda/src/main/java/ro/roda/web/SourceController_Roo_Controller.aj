// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.Org;
import ro.roda.Source;
import ro.roda.SourceContacts;
import ro.roda.Sourcestudy;
import ro.roda.Sourcetype;
import ro.roda.SourcetypeHistory;
import ro.roda.web.SourceController;

privileged aspect SourceController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String SourceController.create(@Valid Source source, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, source);
            return "sources/create";
        }
        uiModel.asMap().clear();
        source.persist();
        return "redirect:/sources/" + encodeUrlPathSegment(source.getOrgId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String SourceController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Source());
        return "sources/create";
    }
    
    @RequestMapping(value = "/{orgId}", produces = "text/html")
    public String SourceController.show(@PathVariable("orgId") Integer orgId, Model uiModel) {
        uiModel.addAttribute("source", Source.findSource(orgId));
        uiModel.addAttribute("itemId", orgId);
        return "sources/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String SourceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("sources", Source.findSourceEntries(firstResult, sizeNo));
            float nrOfPages = (float) Source.countSources() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("sources", Source.findAllSources());
        }
        return "sources/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String SourceController.update(@Valid Source source, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, source);
            return "sources/update";
        }
        uiModel.asMap().clear();
        source.merge();
        return "redirect:/sources/" + encodeUrlPathSegment(source.getOrgId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{orgId}", params = "form", produces = "text/html")
    public String SourceController.updateForm(@PathVariable("orgId") Integer orgId, Model uiModel) {
        populateEditForm(uiModel, Source.findSource(orgId));
        return "sources/update";
    }
    
    @RequestMapping(value = "/{orgId}", method = RequestMethod.DELETE, produces = "text/html")
    public String SourceController.delete(@PathVariable("orgId") Integer orgId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Source source = Source.findSource(orgId);
        source.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/sources";
    }
    
    void SourceController.populateEditForm(Model uiModel, Source source) {
        uiModel.addAttribute("source", source);
        uiModel.addAttribute("orgs", Org.findAllOrgs());
        uiModel.addAttribute("sourcecontactses", SourceContacts.findAllSourceContactses());
        uiModel.addAttribute("sourcestudys", Sourcestudy.findAllSourcestudys());
        uiModel.addAttribute("sourcetypes", Sourcetype.findAllSourcetypes());
        uiModel.addAttribute("sourcetypehistorys", SourcetypeHistory.findAllSourcetypeHistorys());
    }
    
    String SourceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
