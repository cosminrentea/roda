// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Setting;
import ro.roda.SettingDataOnDemand;
import ro.roda.SettingValue;
import ro.roda.SettingValueDataOnDemand;
import ro.roda.service.SettingValueService;

privileged aspect SettingValueDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SettingValueDataOnDemand: @Component;
    
    private Random SettingValueDataOnDemand.rnd = new SecureRandom();
    
    private List<SettingValue> SettingValueDataOnDemand.data;
    
    @Autowired
    SettingDataOnDemand SettingValueDataOnDemand.settingDataOnDemand;
    
    @Autowired
    SettingValueService SettingValueDataOnDemand.settingValueService;
    
    public SettingValue SettingValueDataOnDemand.getNewTransientSettingValue(int index) {
        SettingValue obj = new SettingValue();
        setSetting(obj, index);
        setValue(obj, index);
        return obj;
    }
    
    public void SettingValueDataOnDemand.setSetting(SettingValue obj, int index) {
        Setting setting = settingDataOnDemand.getSpecificSetting(index);
        obj.setSetting(setting);
    }
    
    public void SettingValueDataOnDemand.setValue(SettingValue obj, int index) {
        String value = "value_" + index;
        obj.setValue(value);
    }
    
    public SettingValue SettingValueDataOnDemand.getSpecificSettingValue(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SettingValue obj = data.get(index);
        Integer id = obj.getSettingId();
        return settingValueService.findSettingValue(id);
    }
    
    public SettingValue SettingValueDataOnDemand.getRandomSettingValue() {
        init();
        SettingValue obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getSettingId();
        return settingValueService.findSettingValue(id);
    }
    
    public boolean SettingValueDataOnDemand.modifySettingValue(SettingValue obj) {
        return false;
    }
    
    public void SettingValueDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = settingValueService.findSettingValueEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SettingValue' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SettingValue>();
        for (int i = 0; i < 10; i++) {
            SettingValue obj = getNewTransientSettingValue(i);
            try {
                settingValueService.saveSettingValue(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
