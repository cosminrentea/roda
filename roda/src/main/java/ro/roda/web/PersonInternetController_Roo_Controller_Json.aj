// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import ro.roda.domain.PersonInternet;
import ro.roda.domain.PersonInternetPK;
import ro.roda.web.PersonInternetController;

privileged aspect PersonInternetController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PersonInternetController.showJson(@PathVariable("id") PersonInternetPK id) {
        PersonInternet personInternet = personInternetService.findPersonInternet(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (personInternet == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(personInternet.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> PersonInternetController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<PersonInternet> result = personInternetService.findAllPersonInternets();
        return new ResponseEntity<String>(PersonInternet.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PersonInternetController.createFromJson(@RequestBody String json) {
        PersonInternet personInternet = PersonInternet.fromJsonToPersonInternet(json);
        personInternetService.savePersonInternet(personInternet);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PersonInternetController.createFromJsonArray(@RequestBody String json) {
        for (PersonInternet personInternet: PersonInternet.fromJsonArrayToPersonInternets(json)) {
            personInternetService.savePersonInternet(personInternet);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PersonInternetController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        PersonInternet personInternet = PersonInternet.fromJsonToPersonInternet(json);
        if (personInternetService.updatePersonInternet(personInternet) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> PersonInternetController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (PersonInternet personInternet: PersonInternet.fromJsonArrayToPersonInternets(json)) {
            if (personInternetService.updatePersonInternet(personInternet) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> PersonInternetController.deleteFromJson(@PathVariable("id") PersonInternetPK id) {
        PersonInternet personInternet = personInternetService.findPersonInternet(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (personInternet == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        personInternetService.deletePersonInternet(personInternet);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
