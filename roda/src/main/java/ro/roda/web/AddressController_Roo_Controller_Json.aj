// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import ro.roda.domain.Address;
import ro.roda.domain.City;
import ro.roda.web.AddressController;

privileged aspect AddressController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.showJson(@PathVariable("id") Integer id) {
        Address address = addressService.findAddress(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (address == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(address.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Address> result = addressService.findAllAddresses();
        return new ResponseEntity<String>(Address.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.createFromJson(@RequestBody String json) {
        Address address = Address.fromJsonToAddress(json);
        addressService.saveAddress(address);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.createFromJsonArray(@RequestBody String json) {
        for (Address address: Address.fromJsonArrayToAddresses(json)) {
            addressService.saveAddress(address);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Address address = Address.fromJsonToAddress(json);
        if (addressService.updateAddress(address) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (Address address: Address.fromJsonArrayToAddresses(json)) {
            if (addressService.updateAddress(address) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> AddressController.deleteFromJson(@PathVariable("id") Integer id) {
        Address address = addressService.findAddress(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (address == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        addressService.deleteAddress(address);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCityId", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.jsonFindAddressesByCityId(@RequestParam("cityId") City cityId) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Address.toJsonArray(Address.findAddressesByCityId(cityId).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByCityIdAndPostalCodeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.jsonFindAddressesByCityIdAndPostalCodeEquals(@RequestParam("cityId") City cityId, @RequestParam("postalCode") String postalCode) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Address.toJsonArray(Address.findAddressesByCityIdAndPostalCodeEquals(cityId, postalCode).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPostalCodeEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> AddressController.jsonFindAddressesByPostalCodeEquals(@RequestParam("postalCode") String postalCode) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Address.toJsonArray(Address.findAddressesByPostalCodeEquals(postalCode).getResultList()), headers, HttpStatus.OK);
    }
    
}
