// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import javax.persistence.PostPersist;
import javax.persistence.PostUpdate;
import javax.persistence.PreRemove;
import org.apache.solr.client.solrj.SolrQuery;
import org.apache.solr.client.solrj.SolrServer;
import org.apache.solr.client.solrj.response.QueryResponse;
import org.springframework.scheduling.annotation.Async;
import ro.roda.News;

privileged aspect News_Roo_SolrSearch {
    
    public static QueryResponse News.search(String queryString) {
        String searchString = "News_solrsummary_t:" + queryString;
        return search(new SolrQuery(searchString.toLowerCase()));
    }
    
    public static QueryResponse News.search(SolrQuery query) {
        try {
            return solrServer().query(query);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return new QueryResponse();
    }
    
    @Async
    public static void News.deleteIndex(News news) {
        SolrServer solrServer = solrServer();
        try {
            solrServer.deleteById("news_" + news.getId());
            solrServer.commit();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @PostUpdate
    @PostPersist
    private void News.postPersistOrUpdate() {
        indexNews(this);
    }
    
    @PreRemove
    private void News.preRemove() {
        deleteIndex(this);
    }
    
    public static SolrServer News.solrServer() {
        SolrServer _solrServer = new News().solrServer;
        if (_solrServer == null) throw new IllegalStateException("Solr server has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return _solrServer;
    }
    
}
