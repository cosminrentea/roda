// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Email;
import ro.roda.EmailDataOnDemand;
import ro.roda.Org;
import ro.roda.OrgDataOnDemand;
import ro.roda.OrgEmail;
import ro.roda.OrgEmailDataOnDemand;
import ro.roda.OrgEmailPK;
import ro.roda.service.OrgEmailService;

privileged aspect OrgEmailDataOnDemand_Roo_DataOnDemand {
    
    declare @type: OrgEmailDataOnDemand: @Component;
    
    private Random OrgEmailDataOnDemand.rnd = new SecureRandom();
    
    private List<OrgEmail> OrgEmailDataOnDemand.data;
    
    @Autowired
    EmailDataOnDemand OrgEmailDataOnDemand.emailDataOnDemand;
    
    @Autowired
    OrgDataOnDemand OrgEmailDataOnDemand.orgDataOnDemand;
    
    @Autowired
    OrgEmailService OrgEmailDataOnDemand.orgEmailService;
    
    public OrgEmail OrgEmailDataOnDemand.getNewTransientOrgEmail(int index) {
        OrgEmail obj = new OrgEmail();
        setEmbeddedIdClass(obj, index);
        setEmailId(obj, index);
        setMain(obj, index);
        setOrgId(obj, index);
        return obj;
    }
    
    public void OrgEmailDataOnDemand.setEmbeddedIdClass(OrgEmail obj, int index) {
        Integer orgId = new Integer(index);
        Integer emailId = new Integer(index);
        
        OrgEmailPK embeddedIdClass = new OrgEmailPK(orgId, emailId);
        obj.setId(embeddedIdClass);
    }
    
    public void OrgEmailDataOnDemand.setEmailId(OrgEmail obj, int index) {
        Email emailId = emailDataOnDemand.getRandomEmail();
        obj.setEmailId(emailId);
    }
    
    public void OrgEmailDataOnDemand.setMain(OrgEmail obj, int index) {
        Boolean main = true;
        obj.setMain(main);
    }
    
    public void OrgEmailDataOnDemand.setOrgId(OrgEmail obj, int index) {
        Org orgId = orgDataOnDemand.getRandomOrg();
        obj.setOrgId(orgId);
    }
    
    public OrgEmail OrgEmailDataOnDemand.getSpecificOrgEmail(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        OrgEmail obj = data.get(index);
        OrgEmailPK id = obj.getId();
        return orgEmailService.findOrgEmail(id);
    }
    
    public OrgEmail OrgEmailDataOnDemand.getRandomOrgEmail() {
        init();
        OrgEmail obj = data.get(rnd.nextInt(data.size()));
        OrgEmailPK id = obj.getId();
        return orgEmailService.findOrgEmail(id);
    }
    
    public boolean OrgEmailDataOnDemand.modifyOrgEmail(OrgEmail obj) {
        return false;
    }
    
    public void OrgEmailDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = orgEmailService.findOrgEmailEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'OrgEmail' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<OrgEmail>();
        for (int i = 0; i < 10; i++) {
            OrgEmail obj = getNewTransientOrgEmail(i);
            try {
                orgEmailService.saveOrgEmail(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
