// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.CmsPage;
import ro.roda.CmsPageContent;
import ro.roda.CmsPageContentDataOnDemand;
import ro.roda.CmsPageDataOnDemand;
import ro.roda.service.CmsPageContentService;

privileged aspect CmsPageContentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CmsPageContentDataOnDemand: @Component;
    
    private Random CmsPageContentDataOnDemand.rnd = new SecureRandom();
    
    private List<CmsPageContent> CmsPageContentDataOnDemand.data;
    
    @Autowired
    CmsPageDataOnDemand CmsPageContentDataOnDemand.cmsPageDataOnDemand;
    
    @Autowired
    CmsPageContentService CmsPageContentDataOnDemand.cmsPageContentService;
    
    public CmsPageContent CmsPageContentDataOnDemand.getNewTransientCmsPageContent(int index) {
        CmsPageContent obj = new CmsPageContent();
        setCmsPageId(obj, index);
        setContentText(obj, index);
        setContentTitle(obj, index);
        setName(obj, index);
        setOrderInPage(obj, index);
        return obj;
    }
    
    public void CmsPageContentDataOnDemand.setCmsPageId(CmsPageContent obj, int index) {
        CmsPage cmsPageId = cmsPageDataOnDemand.getRandomCmsPage();
        obj.setCmsPageId(cmsPageId);
    }
    
    public void CmsPageContentDataOnDemand.setContentText(CmsPageContent obj, int index) {
        String contentText = "contentText_" + index;
        obj.setContentText(contentText);
    }
    
    public void CmsPageContentDataOnDemand.setContentTitle(CmsPageContent obj, int index) {
        String contentTitle = "contentTitle_" + index;
        if (contentTitle.length() > 250) {
            contentTitle = contentTitle.substring(0, 250);
        }
        obj.setContentTitle(contentTitle);
    }
    
    public void CmsPageContentDataOnDemand.setName(CmsPageContent obj, int index) {
        String name = "name_" + index;
        if (name.length() > 200) {
            name = name.substring(0, 200);
        }
        obj.setName(name);
    }
    
    public void CmsPageContentDataOnDemand.setOrderInPage(CmsPageContent obj, int index) {
        Integer orderInPage = new Integer(index);
        obj.setOrderInPage(orderInPage);
    }
    
    public CmsPageContent CmsPageContentDataOnDemand.getSpecificCmsPageContent(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CmsPageContent obj = data.get(index);
        Integer id = obj.getId();
        return cmsPageContentService.findCmsPageContent(id);
    }
    
    public CmsPageContent CmsPageContentDataOnDemand.getRandomCmsPageContent() {
        init();
        CmsPageContent obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getId();
        return cmsPageContentService.findCmsPageContent(id);
    }
    
    public boolean CmsPageContentDataOnDemand.modifyCmsPageContent(CmsPageContent obj) {
        return false;
    }
    
    public void CmsPageContentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = cmsPageContentService.findCmsPageContentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CmsPageContent' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CmsPageContent>();
        for (int i = 0; i < 10; i++) {
            CmsPageContent obj = getNewTransientCmsPageContent(i);
            try {
                cmsPageContentService.saveCmsPageContent(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
