// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.InstanceDataOnDemand;
import ro.roda.InstancePerson;
import ro.roda.InstancePersonAssocDataOnDemand;
import ro.roda.InstancePersonDataOnDemand;
import ro.roda.InstancePersonPK;
import ro.roda.PersonDataOnDemand;

privileged aspect InstancePersonDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InstancePersonDataOnDemand: @Component;
    
    private Random InstancePersonDataOnDemand.rnd = new SecureRandom();
    
    private List<InstancePerson> InstancePersonDataOnDemand.data;
    
    @Autowired
    private InstancePersonAssocDataOnDemand InstancePersonDataOnDemand.instancePersonAssocDataOnDemand;
    
    @Autowired
    private InstanceDataOnDemand InstancePersonDataOnDemand.instanceDataOnDemand;
    
    @Autowired
    private PersonDataOnDemand InstancePersonDataOnDemand.personDataOnDemand;
    
    public InstancePerson InstancePersonDataOnDemand.getNewTransientInstancePerson(int index) {
        InstancePerson obj = new InstancePerson();
        setEmbeddedIdClass(obj, index);
        setAssocDetails(obj, index);
        return obj;
    }
    
    public void InstancePersonDataOnDemand.setEmbeddedIdClass(InstancePerson obj, int index) {
        Integer personId = new Integer(index);
        Integer instanceId = new Integer(index);
        Integer assocTypeId = new Integer(index);
        
        InstancePersonPK embeddedIdClass = new InstancePersonPK(personId, instanceId, assocTypeId);
        obj.setId(embeddedIdClass);
    }
    
    public void InstancePersonDataOnDemand.setAssocDetails(InstancePerson obj, int index) {
        String assocDetails = "assocDetails_" + index;
        obj.setAssocDetails(assocDetails);
    }
    
    public InstancePerson InstancePersonDataOnDemand.getSpecificInstancePerson(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        InstancePerson obj = data.get(index);
        InstancePersonPK id = obj.getId();
        return InstancePerson.findInstancePerson(id);
    }
    
    public InstancePerson InstancePersonDataOnDemand.getRandomInstancePerson() {
        init();
        InstancePerson obj = data.get(rnd.nextInt(data.size()));
        InstancePersonPK id = obj.getId();
        return InstancePerson.findInstancePerson(id);
    }
    
    public boolean InstancePersonDataOnDemand.modifyInstancePerson(InstancePerson obj) {
        return false;
    }
    
    public void InstancePersonDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = InstancePerson.findInstancePersonEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'InstancePerson' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<InstancePerson>();
        for (int i = 0; i < 10; i++) {
            InstancePerson obj = getNewTransientInstancePerson(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
