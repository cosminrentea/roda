// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.EditedVariable;
import ro.roda.FormEditedNumberVar;
import ro.roda.FormEditedTextVar;
import ro.roda.OtherStatistic;
import ro.roda.Variable;
import ro.roda.web.EditedVariableController;

privileged aspect EditedVariableController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String EditedVariableController.create(@Valid EditedVariable editedVariable, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, editedVariable);
            return "editedvariables/create";
        }
        uiModel.asMap().clear();
        editedVariable.persist();
        return "redirect:/editedvariables/" + encodeUrlPathSegment(editedVariable.getVariableId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String EditedVariableController.createForm(Model uiModel) {
        populateEditForm(uiModel, new EditedVariable());
        return "editedvariables/create";
    }
    
    @RequestMapping(value = "/{variableId}", produces = "text/html")
    public String EditedVariableController.show(@PathVariable("variableId") Integer variableId, Model uiModel) {
        uiModel.addAttribute("editedvariable", EditedVariable.findEditedVariable(variableId));
        uiModel.addAttribute("itemId", variableId);
        return "editedvariables/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String EditedVariableController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("editedvariables", EditedVariable.findEditedVariableEntries(firstResult, sizeNo));
            float nrOfPages = (float) EditedVariable.countEditedVariables() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("editedvariables", EditedVariable.findAllEditedVariables());
        }
        return "editedvariables/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String EditedVariableController.update(@Valid EditedVariable editedVariable, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, editedVariable);
            return "editedvariables/update";
        }
        uiModel.asMap().clear();
        editedVariable.merge();
        return "redirect:/editedvariables/" + encodeUrlPathSegment(editedVariable.getVariableId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{variableId}", params = "form", produces = "text/html")
    public String EditedVariableController.updateForm(@PathVariable("variableId") Integer variableId, Model uiModel) {
        populateEditForm(uiModel, EditedVariable.findEditedVariable(variableId));
        return "editedvariables/update";
    }
    
    @RequestMapping(value = "/{variableId}", method = RequestMethod.DELETE, produces = "text/html")
    public String EditedVariableController.delete(@PathVariable("variableId") Integer variableId, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        EditedVariable editedVariable = EditedVariable.findEditedVariable(variableId);
        editedVariable.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/editedvariables";
    }
    
    void EditedVariableController.populateEditForm(Model uiModel, EditedVariable editedVariable) {
        uiModel.addAttribute("editedVariable", editedVariable);
        uiModel.addAttribute("formeditednumbervars", FormEditedNumberVar.findAllFormEditedNumberVars());
        uiModel.addAttribute("formeditedtextvars", FormEditedTextVar.findAllFormEditedTextVars());
        uiModel.addAttribute("otherstatistics", OtherStatistic.findAllOtherStatistics());
        uiModel.addAttribute("variables", Variable.findAllVariables());
    }
    
    String EditedVariableController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
