// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import ro.roda.domain.SelectionVariable;
import ro.roda.web.SelectionVariableController;

privileged aspect SelectionVariableController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{variableId}", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SelectionVariableController.showJson(@PathVariable("variableId") Long variableId) {
        SelectionVariable selectionVariable = selectionVariableService.findSelectionVariable(variableId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (selectionVariable == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(selectionVariable.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> SelectionVariableController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<SelectionVariable> result = selectionVariableService.findAllSelectionVariables();
        return new ResponseEntity<String>(SelectionVariable.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SelectionVariableController.createFromJson(@RequestBody String json) {
        SelectionVariable selectionVariable = SelectionVariable.fromJsonToSelectionVariable(json);
        selectionVariableService.saveSelectionVariable(selectionVariable);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> SelectionVariableController.createFromJsonArray(@RequestBody String json) {
        for (SelectionVariable selectionVariable: SelectionVariable.fromJsonArrayToSelectionVariables(json)) {
            selectionVariableService.saveSelectionVariable(selectionVariable);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SelectionVariableController.updateFromJson(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        SelectionVariable selectionVariable = SelectionVariable.fromJsonToSelectionVariable(json);
        if (selectionVariableService.updateSelectionVariable(selectionVariable) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> SelectionVariableController.updateFromJsonArray(@RequestBody String json) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        for (SelectionVariable selectionVariable: SelectionVariable.fromJsonArrayToSelectionVariables(json)) {
            if (selectionVariableService.updateSelectionVariable(selectionVariable) == null) {
                return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{variableId}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> SelectionVariableController.deleteFromJson(@PathVariable("variableId") Long variableId) {
        SelectionVariable selectionVariable = selectionVariableService.findSelectionVariable(variableId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (selectionVariable == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        selectionVariableService.deleteSelectionVariable(selectionVariable);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
