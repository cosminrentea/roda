// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import ro.roda.domain.Address;
import ro.roda.domain.City;

privileged aspect Address_Roo_Finder {
    
    public static TypedQuery<Address> Address.findAddressesByCityId(City cityId) {
        if (cityId == null) throw new IllegalArgumentException("The cityId argument is required");
        EntityManager em = Address.entityManager();
        TypedQuery<Address> q = em.createQuery("SELECT o FROM Address AS o WHERE o.cityId = :cityId", Address.class);
        q.setParameter("cityId", cityId);
        return q;
    }
    
    public static TypedQuery<Address> Address.findAddressesByCityIdAndPostalCodeEquals(City cityId, String postalCode) {
        if (cityId == null) throw new IllegalArgumentException("The cityId argument is required");
        if (postalCode == null || postalCode.length() == 0) throw new IllegalArgumentException("The postalCode argument is required");
        EntityManager em = Address.entityManager();
        TypedQuery<Address> q = em.createQuery("SELECT o FROM Address AS o WHERE o.cityId = :cityId AND o.postalCode = :postalCode", Address.class);
        q.setParameter("cityId", cityId);
        q.setParameter("postalCode", postalCode);
        return q;
    }
    
    public static TypedQuery<Address> Address.findAddressesByPostalCodeEquals(String postalCode) {
        if (postalCode == null || postalCode.length() == 0) throw new IllegalArgumentException("The postalCode argument is required");
        EntityManager em = Address.entityManager();
        TypedQuery<Address> q = em.createQuery("SELECT o FROM Address AS o WHERE o.postalCode = :postalCode", Address.class);
        q.setParameter("postalCode", postalCode);
        return q;
    }
    
}
