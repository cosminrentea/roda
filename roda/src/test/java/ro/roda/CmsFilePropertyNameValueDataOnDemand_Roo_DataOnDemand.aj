// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.CmsFile;
import ro.roda.CmsFileDataOnDemand;
import ro.roda.CmsFilePropertyNameValue;
import ro.roda.CmsFilePropertyNameValueDataOnDemand;
import ro.roda.CmsFilePropertyNameValuePK;
import ro.roda.PropertyName;
import ro.roda.PropertyNameDataOnDemand;
import ro.roda.PropertyValue;
import ro.roda.PropertyValueDataOnDemand;
import ro.roda.service.CmsFilePropertyNameValueService;

privileged aspect CmsFilePropertyNameValueDataOnDemand_Roo_DataOnDemand {
    
    declare @type: CmsFilePropertyNameValueDataOnDemand: @Component;
    
    private Random CmsFilePropertyNameValueDataOnDemand.rnd = new SecureRandom();
    
    private List<CmsFilePropertyNameValue> CmsFilePropertyNameValueDataOnDemand.data;
    
    @Autowired
    CmsFileDataOnDemand CmsFilePropertyNameValueDataOnDemand.cmsFileDataOnDemand;
    
    @Autowired
    PropertyNameDataOnDemand CmsFilePropertyNameValueDataOnDemand.propertyNameDataOnDemand;
    
    @Autowired
    PropertyValueDataOnDemand CmsFilePropertyNameValueDataOnDemand.propertyValueDataOnDemand;
    
    @Autowired
    CmsFilePropertyNameValueService CmsFilePropertyNameValueDataOnDemand.cmsFilePropertyNameValueService;
    
    public CmsFilePropertyNameValue CmsFilePropertyNameValueDataOnDemand.getNewTransientCmsFilePropertyNameValue(int index) {
        CmsFilePropertyNameValue obj = new CmsFilePropertyNameValue();
        setEmbeddedIdClass(obj, index);
        setCmsFileId(obj, index);
        setPropertyNameId(obj, index);
        setPropertyValueId(obj, index);
        return obj;
    }
    
    public void CmsFilePropertyNameValueDataOnDemand.setEmbeddedIdClass(CmsFilePropertyNameValue obj, int index) {
        Integer cmsFileId = new Integer(index);
        Integer propertyNameId = new Integer(index);
        Integer propertyValueId = new Integer(index);
        
        CmsFilePropertyNameValuePK embeddedIdClass = new CmsFilePropertyNameValuePK(cmsFileId, propertyNameId, propertyValueId);
        obj.setId(embeddedIdClass);
    }
    
    public void CmsFilePropertyNameValueDataOnDemand.setCmsFileId(CmsFilePropertyNameValue obj, int index) {
        CmsFile cmsFileId = cmsFileDataOnDemand.getRandomCmsFile();
        obj.setCmsFileId(cmsFileId);
    }
    
    public void CmsFilePropertyNameValueDataOnDemand.setPropertyNameId(CmsFilePropertyNameValue obj, int index) {
        PropertyName propertyNameId = propertyNameDataOnDemand.getRandomPropertyName();
        obj.setPropertyNameId(propertyNameId);
    }
    
    public void CmsFilePropertyNameValueDataOnDemand.setPropertyValueId(CmsFilePropertyNameValue obj, int index) {
        PropertyValue propertyValueId = propertyValueDataOnDemand.getRandomPropertyValue();
        obj.setPropertyValueId(propertyValueId);
    }
    
    public CmsFilePropertyNameValue CmsFilePropertyNameValueDataOnDemand.getSpecificCmsFilePropertyNameValue(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        CmsFilePropertyNameValue obj = data.get(index);
        CmsFilePropertyNameValuePK id = obj.getId();
        return cmsFilePropertyNameValueService.findCmsFilePropertyNameValue(id);
    }
    
    public CmsFilePropertyNameValue CmsFilePropertyNameValueDataOnDemand.getRandomCmsFilePropertyNameValue() {
        init();
        CmsFilePropertyNameValue obj = data.get(rnd.nextInt(data.size()));
        CmsFilePropertyNameValuePK id = obj.getId();
        return cmsFilePropertyNameValueService.findCmsFilePropertyNameValue(id);
    }
    
    public boolean CmsFilePropertyNameValueDataOnDemand.modifyCmsFilePropertyNameValue(CmsFilePropertyNameValue obj) {
        return false;
    }
    
    public void CmsFilePropertyNameValueDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = cmsFilePropertyNameValueService.findCmsFilePropertyNameValueEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'CmsFilePropertyNameValue' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<CmsFilePropertyNameValue>();
        for (int i = 0; i < 10; i++) {
            CmsFilePropertyNameValue obj = getNewTransientCmsFilePropertyNameValue(i);
            try {
                cmsFilePropertyNameValueService.saveCmsFilePropertyNameValue(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
