// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda.web;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import ro.roda.domain.Rodauser;
import ro.roda.service.AuditLogChangesetService;
import ro.roda.service.AuthDataService;
import ro.roda.service.CatalogService;
import ro.roda.service.CmsPageService;
import ro.roda.service.InstanceKeywordService;
import ro.roda.service.InstanceService;
import ro.roda.service.NewsService;
import ro.roda.service.PersonLinksService;
import ro.roda.service.RodauserService;
import ro.roda.service.RoleService;
import ro.roda.service.SourcestudyTypeHistoryService;
import ro.roda.service.SourcetypeHistoryService;
import ro.roda.service.StudyKeywordService;
import ro.roda.service.StudyService;
import ro.roda.service.UserAuthLogService;
import ro.roda.service.UserMessageService;
import ro.roda.service.UserProfileService;
import ro.roda.service.UserSettingValueService;
import ro.roda.web.RodauserController;

privileged aspect RodauserController_Roo_Controller {
    
    @Autowired
    RodauserService RodauserController.rodauserService;
    
    @Autowired
    AuditLogChangesetService RodauserController.auditLogChangesetService;
    
    @Autowired
    AuthDataService RodauserController.authDataService;
    
    @Autowired
    CatalogService RodauserController.catalogService;
    
    @Autowired
    CmsPageService RodauserController.cmsPageService;
    
    @Autowired
    InstanceService RodauserController.instanceService;
    
    @Autowired
    InstanceKeywordService RodauserController.instanceKeywordService;
    
    @Autowired
    NewsService RodauserController.newsService;
    
    @Autowired
    PersonLinksService RodauserController.personLinksService;
    
    @Autowired
    RoleService RodauserController.roleService;
    
    @Autowired
    SourcestudyTypeHistoryService RodauserController.sourcestudyTypeHistoryService;
    
    @Autowired
    SourcetypeHistoryService RodauserController.sourcetypeHistoryService;
    
    @Autowired
    StudyService RodauserController.studyService;
    
    @Autowired
    StudyKeywordService RodauserController.studyKeywordService;
    
    @Autowired
    UserAuthLogService RodauserController.userAuthLogService;
    
    @Autowired
    UserMessageService RodauserController.userMessageService;
    
    @Autowired
    UserProfileService RodauserController.userProfileService;
    
    @Autowired
    UserSettingValueService RodauserController.userSettingValueService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String RodauserController.create(@Valid Rodauser rodauser, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rodauser);
            return "rodausers/create";
        }
        uiModel.asMap().clear();
        rodauserService.saveRodauser(rodauser);
        return "redirect:/rodausers/" + encodeUrlPathSegment(rodauser.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String RodauserController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Rodauser());
        return "rodausers/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String RodauserController.show(@PathVariable("id") Integer id, Model uiModel) {
        uiModel.addAttribute("rodauser", rodauserService.findRodauser(id));
        uiModel.addAttribute("itemId", id);
        return "rodausers/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String RodauserController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("rodausers", rodauserService.findRodauserEntries(firstResult, sizeNo));
            float nrOfPages = (float) rodauserService.countAllRodausers() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("rodausers", rodauserService.findAllRodausers());
        }
        return "rodausers/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String RodauserController.update(@Valid Rodauser rodauser, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rodauser);
            return "rodausers/update";
        }
        uiModel.asMap().clear();
        rodauserService.updateRodauser(rodauser);
        return "redirect:/rodausers/" + encodeUrlPathSegment(rodauser.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String RodauserController.updateForm(@PathVariable("id") Integer id, Model uiModel) {
        populateEditForm(uiModel, rodauserService.findRodauser(id));
        return "rodausers/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String RodauserController.delete(@PathVariable("id") Integer id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Rodauser rodauser = rodauserService.findRodauser(id);
        rodauserService.deleteRodauser(rodauser);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/rodausers";
    }
    
    void RodauserController.populateEditForm(Model uiModel, Rodauser rodauser) {
        uiModel.addAttribute("rodauser", rodauser);
        uiModel.addAttribute("auditlogchangesets", auditLogChangesetService.findAllAuditLogChangesets());
        uiModel.addAttribute("authdatas", authDataService.findAllAuthDatas());
        uiModel.addAttribute("catalogs", catalogService.findAllCatalogs());
        uiModel.addAttribute("cmspages", cmsPageService.findAllCmsPages());
        uiModel.addAttribute("instances", instanceService.findAllInstances());
        uiModel.addAttribute("instancekeywords", instanceKeywordService.findAllInstanceKeywords());
        uiModel.addAttribute("newspieces", newsService.findAllNewsPieces());
        uiModel.addAttribute("personlinkses", personLinksService.findAllPersonLinkses());
        uiModel.addAttribute("roles", roleService.findAllRoles());
        uiModel.addAttribute("sourcestudytypehistorys", sourcestudyTypeHistoryService.findAllSourcestudyTypeHistorys());
        uiModel.addAttribute("sourcetypehistorys", sourcetypeHistoryService.findAllSourcetypeHistorys());
        uiModel.addAttribute("studys", studyService.findAllStudys());
        uiModel.addAttribute("studykeywords", studyKeywordService.findAllStudyKeywords());
        uiModel.addAttribute("userauthlogs", userAuthLogService.findAllUserAuthLogs());
        uiModel.addAttribute("usermessages", userMessageService.findAllUserMessages());
        uiModel.addAttribute("userprofiles", userProfileService.findAllUserProfiles());
        uiModel.addAttribute("usersettingvalues", userSettingValueService.findAllUserSettingValues());
    }
    
    String RodauserController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
