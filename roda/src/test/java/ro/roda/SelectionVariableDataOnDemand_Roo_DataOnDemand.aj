// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.SelectionVariable;
import ro.roda.SelectionVariableDataOnDemand;
import ro.roda.Variable;
import ro.roda.service.SelectionVariableService;

privileged aspect SelectionVariableDataOnDemand_Roo_DataOnDemand {
    
    declare @type: SelectionVariableDataOnDemand: @Component;
    
    private Random SelectionVariableDataOnDemand.rnd = new SecureRandom();
    
    private List<SelectionVariable> SelectionVariableDataOnDemand.data;
    
    @Autowired
    SelectionVariableService SelectionVariableDataOnDemand.selectionVariableService;
    
    public SelectionVariable SelectionVariableDataOnDemand.getNewTransientSelectionVariable(int index) {
        SelectionVariable obj = new SelectionVariable();
        setMaxCount(obj, index);
        setMinCount(obj, index);
        setVariable(obj, index);
        return obj;
    }
    
    public void SelectionVariableDataOnDemand.setMaxCount(SelectionVariable obj, int index) {
        Short maxCount = new Integer(index).shortValue();
        obj.setMaxCount(maxCount);
    }
    
    public void SelectionVariableDataOnDemand.setMinCount(SelectionVariable obj, int index) {
        Short minCount = new Integer(index).shortValue();
        obj.setMinCount(minCount);
    }
    
    public void SelectionVariableDataOnDemand.setVariable(SelectionVariable obj, int index) {
        Variable variable = null;
        obj.setVariable(variable);
    }
    
    public SelectionVariable SelectionVariableDataOnDemand.getSpecificSelectionVariable(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        SelectionVariable obj = data.get(index);
        Long id = obj.getVariableId();
        return selectionVariableService.findSelectionVariable(id);
    }
    
    public SelectionVariable SelectionVariableDataOnDemand.getRandomSelectionVariable() {
        init();
        SelectionVariable obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getVariableId();
        return selectionVariableService.findSelectionVariable(id);
    }
    
    public boolean SelectionVariableDataOnDemand.modifySelectionVariable(SelectionVariable obj) {
        return false;
    }
    
    public void SelectionVariableDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = selectionVariableService.findSelectionVariableEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'SelectionVariable' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<SelectionVariable>();
        for (int i = 0; i < 10; i++) {
            SelectionVariable obj = getNewTransientSelectionVariable(i);
            try {
                selectionVariableService.saveSelectionVariable(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
