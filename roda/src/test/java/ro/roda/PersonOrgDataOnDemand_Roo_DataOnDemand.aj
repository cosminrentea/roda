// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.OrgDataOnDemand;
import ro.roda.PersonDataOnDemand;
import ro.roda.PersonOrg;
import ro.roda.PersonOrgDataOnDemand;
import ro.roda.PersonOrgPK;
import ro.roda.PersonRoleDataOnDemand;

privileged aspect PersonOrgDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PersonOrgDataOnDemand: @Component;
    
    private Random PersonOrgDataOnDemand.rnd = new SecureRandom();
    
    private List<PersonOrg> PersonOrgDataOnDemand.data;
    
    @Autowired
    private OrgDataOnDemand PersonOrgDataOnDemand.orgDataOnDemand;
    
    @Autowired
    private PersonDataOnDemand PersonOrgDataOnDemand.personDataOnDemand;
    
    @Autowired
    private PersonRoleDataOnDemand PersonOrgDataOnDemand.personRoleDataOnDemand;
    
    public PersonOrg PersonOrgDataOnDemand.getNewTransientPersonOrg(int index) {
        PersonOrg obj = new PersonOrg();
        setEmbeddedIdClass(obj, index);
        setDateend(obj, index);
        setDatestart(obj, index);
        return obj;
    }
    
    public void PersonOrgDataOnDemand.setEmbeddedIdClass(PersonOrg obj, int index) {
        Integer personId = new Integer(index);
        Integer orgId = new Integer(index);
        Integer roleId = new Integer(index);
        
        PersonOrgPK embeddedIdClass = new PersonOrgPK(personId, orgId, roleId);
        obj.setId(embeddedIdClass);
    }
    
    public void PersonOrgDataOnDemand.setDateend(PersonOrg obj, int index) {
        Date dateend = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateend(dateend);
    }
    
    public void PersonOrgDataOnDemand.setDatestart(PersonOrg obj, int index) {
        Date datestart = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDatestart(datestart);
    }
    
    public PersonOrg PersonOrgDataOnDemand.getSpecificPersonOrg(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        PersonOrg obj = data.get(index);
        PersonOrgPK id = obj.getId();
        return PersonOrg.findPersonOrg(id);
    }
    
    public PersonOrg PersonOrgDataOnDemand.getRandomPersonOrg() {
        init();
        PersonOrg obj = data.get(rnd.nextInt(data.size()));
        PersonOrgPK id = obj.getId();
        return PersonOrg.findPersonOrg(id);
    }
    
    public boolean PersonOrgDataOnDemand.modifyPersonOrg(PersonOrg obj) {
        return false;
    }
    
    public void PersonOrgDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = PersonOrg.findPersonOrgEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'PersonOrg' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<PersonOrg>();
        for (int i = 0; i < 10; i++) {
            PersonOrg obj = getNewTransientPersonOrg(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
