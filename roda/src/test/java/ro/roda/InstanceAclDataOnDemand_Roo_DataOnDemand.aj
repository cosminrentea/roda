// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import ro.roda.Instance;
import ro.roda.InstanceAcl;
import ro.roda.InstanceAclDataOnDemand;
import ro.roda.InstanceAclPK;
import ro.roda.InstanceDataOnDemand;
import ro.roda.service.InstanceAclService;

privileged aspect InstanceAclDataOnDemand_Roo_DataOnDemand {
    
    declare @type: InstanceAclDataOnDemand: @Component;
    
    private Random InstanceAclDataOnDemand.rnd = new SecureRandom();
    
    private List<InstanceAcl> InstanceAclDataOnDemand.data;
    
    @Autowired
    InstanceDataOnDemand InstanceAclDataOnDemand.instanceDataOnDemand;
    
    @Autowired
    InstanceAclService InstanceAclDataOnDemand.instanceAclService;
    
    public InstanceAcl InstanceAclDataOnDemand.getNewTransientInstanceAcl(int index) {
        InstanceAcl obj = new InstanceAcl();
        setEmbeddedIdClass(obj, index);
        setDelete(obj, index);
        setInstanceId(obj, index);
        setModacl(obj, index);
        setRead(obj, index);
        setUpdate(obj, index);
        return obj;
    }
    
    public void InstanceAclDataOnDemand.setEmbeddedIdClass(InstanceAcl obj, int index) {
        Integer instanceId = new Integer(index);
        Integer aroId = new Integer(index);
        Integer aroType = new Integer(index);
        
        InstanceAclPK embeddedIdClass = new InstanceAclPK(instanceId, aroId, aroType);
        obj.setId(embeddedIdClass);
    }
    
    public void InstanceAclDataOnDemand.setDelete(InstanceAcl obj, int index) {
        Boolean delete = Boolean.TRUE;
        obj.setDelete(delete);
    }
    
    public void InstanceAclDataOnDemand.setInstanceId(InstanceAcl obj, int index) {
        Instance instanceId = instanceDataOnDemand.getRandomInstance();
        obj.setInstanceId(instanceId);
    }
    
    public void InstanceAclDataOnDemand.setModacl(InstanceAcl obj, int index) {
        Boolean modacl = Boolean.TRUE;
        obj.setModacl(modacl);
    }
    
    public void InstanceAclDataOnDemand.setRead(InstanceAcl obj, int index) {
        Boolean read = Boolean.TRUE;
        obj.setRead(read);
    }
    
    public void InstanceAclDataOnDemand.setUpdate(InstanceAcl obj, int index) {
        Boolean update = Boolean.TRUE;
        obj.setUpdate(update);
    }
    
    public InstanceAcl InstanceAclDataOnDemand.getSpecificInstanceAcl(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        InstanceAcl obj = data.get(index);
        InstanceAclPK id = obj.getId();
        return instanceAclService.findInstanceAcl(id);
    }
    
    public InstanceAcl InstanceAclDataOnDemand.getRandomInstanceAcl() {
        init();
        InstanceAcl obj = data.get(rnd.nextInt(data.size()));
        InstanceAclPK id = obj.getId();
        return instanceAclService.findInstanceAcl(id);
    }
    
    public boolean InstanceAclDataOnDemand.modifyInstanceAcl(InstanceAcl obj) {
        return false;
    }
    
    public void InstanceAclDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = instanceAclService.findInstanceAclEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'InstanceAcl' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<InstanceAcl>();
        for (int i = 0; i < 10; i++) {
            InstanceAcl obj = getNewTransientInstanceAcl(i);
            try {
                instanceAclService.saveInstanceAcl(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
