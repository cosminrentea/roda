// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ro.roda;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;
import ro.roda.OtherStatistic;

privileged aspect OtherStatistic_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager OtherStatistic.entityManager;
    
    public static final EntityManager OtherStatistic.entityManager() {
        EntityManager em = new OtherStatistic().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long OtherStatistic.countOtherStatistics() {
        return entityManager().createQuery("SELECT COUNT(o) FROM OtherStatistic o", Long.class).getSingleResult();
    }
    
    public static List<OtherStatistic> OtherStatistic.findAllOtherStatistics() {
        return entityManager().createQuery("SELECT o FROM OtherStatistic o", OtherStatistic.class).getResultList();
    }
    
    public static OtherStatistic OtherStatistic.findOtherStatistic(Integer variableId) {
        if (variableId == null) return null;
        return entityManager().find(OtherStatistic.class, variableId);
    }
    
    public static List<OtherStatistic> OtherStatistic.findOtherStatisticEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM OtherStatistic o", OtherStatistic.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void OtherStatistic.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void OtherStatistic.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            OtherStatistic attached = OtherStatistic.findOtherStatistic(this.variableId);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void OtherStatistic.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void OtherStatistic.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public OtherStatistic OtherStatistic.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        OtherStatistic merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
